/*
   Copyright (c) 2004-2020, Jean-Baptiste BRIAUD. All Rights Reserved.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License

Thanks to Etienne M. Gagnon for SableCC that is a wonderful tool and also for
the Java 1.7 grammar for SableCC that was a great source of inspiration
for building Ivar grammar.
 */

Package ivar.grammar;

/*******************************************************************
 * Helpers                                                         *
 *******************************************************************/
Helpers

  unicode_input_character = [0..0xffff];
  ht  = 0x0009;
  lf  = 0x000a;
  ff  = 0x000c;
  cr  = 0x000d;
  sp  = ' ';

  not_star = [unicode_input_character - '*'];
  not_star_not_slash = [unicode_input_character - ['*' + '/']];

  // Note: Helpers related to ivar_letter and ivar_letter_or_digit
  // have not been verified to exactly match the specification.

  unicode_letter =
    [0x0041..0x005a] | [0x0061..0x007a] | [0x00aa..0x00aa] | [0x00b5..0x00b5] |
    [0x00ba..0x00ba] | [0x00c0..0x00d6] | [0x00d8..0x00f6] | [0x00f8..0x01f5] |
    [0x01fa..0x0217] | [0x0250..0x02a8] | [0x02b0..0x02b8] | [0x02bb..0x02c1] |
    [0x02d0..0x02d1] | [0x02e0..0x02e4] | [0x037a..0x037a] | [0x0386..0x0386] |
    [0x0388..0x038a] | [0x038c..0x038c] | [0x038e..0x03a1] | [0x03a3..0x03ce] |
    [0x03d0..0x03d6] | [0x03da..0x03da] | [0x03dc..0x03dc] | [0x03de..0x03de] |
    [0x03e0..0x03e0] | [0x03e2..0x03f3] | [0x0401..0x040c] | [0x040e..0x044f] |
    [0x0451..0x045c] | [0x045e..0x0481] | [0x0490..0x04c4] | [0x04c7..0x04c8] |
    [0x04cb..0x04cc] | [0x04d0..0x04eb] | [0x04ee..0x04f5] | [0x04f8..0x04f9] |
    [0x0531..0x0556] | [0x0559..0x0559] | [0x0561..0x0587] | [0x05d0..0x05ea] |
    [0x05f0..0x05f2] | [0x0621..0x063a] | [0x0640..0x064a] | [0x0671..0x06b7] |
    [0x06ba..0x06be] | [0x06c0..0x06ce] | [0x06d0..0x06d3] | [0x06d5..0x06d5] |
    [0x06e5..0x06e6] | [0x0905..0x0939] | [0x093d..0x093d] | [0x0958..0x0961] |
    [0x0985..0x098c] | [0x098f..0x0990] | [0x0993..0x09a8] | [0x09aa..0x09b0] |
    [0x09b2..0x09b2] | [0x09b6..0x09b9] | [0x09dc..0x09dd] | [0x09df..0x09e1] |
    [0x09f0..0x09f1] | [0x0a05..0x0a0a] | [0x0a0f..0x0a10] | [0x0a13..0x0a28] |
    [0x0a2a..0x0a30] | [0x0a32..0x0a33] | [0x0a35..0x0a36] | [0x0a38..0x0a39] |
    [0x0a59..0x0a5c] | [0x0a5e..0x0a5e] | [0x0a72..0x0a74] | [0x0a85..0x0a8b] |
    [0x0a8d..0x0a8d] | [0x0a8f..0x0a91] | [0x0a93..0x0aa8] | [0x0aaa..0x0ab0] |
    [0x0ab2..0x0ab3] | [0x0ab5..0x0ab9] | [0x0abd..0x0abd] | [0x0ae0..0x0ae0] |
    [0x0b05..0x0b0c] | [0x0b0f..0x0b10] | [0x0b13..0x0b28] | [0x0b2a..0x0b30] |
    [0x0b32..0x0b33] | [0x0b36..0x0b39] | [0x0b3d..0x0b3d] | [0x0b5c..0x0b5d] |
    [0x0b5f..0x0b61] | [0x0b85..0x0b8a] | [0x0b8e..0x0b90] | [0x0b92..0x0b95] |
    [0x0b99..0x0b9a] | [0x0b9c..0x0b9c] | [0x0b9e..0x0b9f] | [0x0ba3..0x0ba4] |
    [0x0ba8..0x0baa] | [0x0bae..0x0bb5] | [0x0bb7..0x0bb9] | [0x0c05..0x0c0c] |
    [0x0c0e..0x0c10] | [0x0c12..0x0c28] | [0x0c2a..0x0c33] | [0x0c35..0x0c39] |
    [0x0c60..0x0c61] | [0x0c85..0x0c8c] | [0x0c8e..0x0c90] | [0x0c92..0x0ca8] |
    [0x0caa..0x0cb3] | [0x0cb5..0x0cb9] | [0x0cde..0x0cde] | [0x0ce0..0x0ce1] |
    [0x0d05..0x0d0c] | [0x0d0e..0x0d10] | [0x0d12..0x0d28] | [0x0d2a..0x0d39] |
    [0x0d60..0x0d61] | [0x0e01..0x0e2e] | [0x0e30..0x0e30] | [0x0e32..0x0e33] |
    [0x0e40..0x0e46] | [0x0e81..0x0e82] | [0x0e84..0x0e84] | [0x0e87..0x0e88] |
    [0x0e8a..0x0e8a] | [0x0e8d..0x0e8d] | [0x0e94..0x0e97] | [0x0e99..0x0e9f] |
    [0x0ea1..0x0ea3] | [0x0ea5..0x0ea5] | [0x0ea7..0x0ea7] | [0x0eaa..0x0eab] |
    [0x0ead..0x0eae] | [0x0eb0..0x0eb0] | [0x0eb2..0x0eb3] | [0x0ebd..0x0ebd] |
    [0x0ec0..0x0ec4] | [0x0ec6..0x0ec6] | [0x0edc..0x0edd] | [0x0f40..0x0f47] |
    [0x0f49..0x0f69] | [0x10a0..0x10c5] | [0x10d0..0x10f6] | [0x1100..0x1159] |
    [0x115f..0x11a2] | [0x11a8..0x11f9] | [0x1e00..0x1e9b] | [0x1ea0..0x1ef9] |
    [0x1f00..0x1f15] | [0x1f18..0x1f1d] | [0x1f20..0x1f45] | [0x1f48..0x1f4d] |
    [0x1f50..0x1f57] | [0x1f59..0x1f59] | [0x1f5b..0x1f5b] | [0x1f5d..0x1f5d] |
    [0x1f5f..0x1f7d] | [0x1f80..0x1fb4] | [0x1fb6..0x1fbc] | [0x1fbe..0x1fbe] |
    [0x1fc2..0x1fc4] | [0x1fc6..0x1fcc] | [0x1fd0..0x1fd3] | [0x1fd6..0x1fdb] |
    [0x1fe0..0x1fec] | [0x1ff2..0x1ff4] | [0x1ff6..0x1ffc] | [0x207f..0x207f] |
    [0x2102..0x2102] | [0x2107..0x2107] | [0x210a..0x2113] | [0x2115..0x2115] |
    [0x2118..0x211d] | [0x2124..0x2124] | [0x2126..0x2126] | [0x2128..0x2128] |
    [0x212a..0x2131] | [0x2133..0x2138] | [0x3005..0x3005] | [0x3031..0x3035] |
    [0x3041..0x3094] | [0x309b..0x309e] | [0x30a1..0x30fa] | [0x30fc..0x30fe] |
    [0x3105..0x312c] | [0x3131..0x318e] | [0x4e00..0x9fa5] | [0xac00..0xd7a3] |
    [0xf900..0xfa2d] | [0xfb00..0xfb06] | [0xfb13..0xfb17] | [0xfb1f..0xfb28] |
    [0xfb2a..0xfb36] | [0xfb38..0xfb3c] | [0xfb3e..0xfb3e] | [0xfb40..0xfb41] |
    [0xfb43..0xfb44] | [0xfb46..0xfbb1] | [0xfbd3..0xfd3d] | [0xfd50..0xfd8f] |
    [0xfd92..0xfdc7] | [0xfdf0..0xfdfb] | [0xfe70..0xfe72] | [0xfe74..0xfe74] |
    [0xfe76..0xfefc] | [0xff21..0xff3a] | [0xff41..0xff5a] | [0xff66..0xffbe] |
    [0xffc2..0xffc7] | [0xffca..0xffcf] | [0xffd2..0xffd7] | [0xffda..0xffdc];

  unicode_digit =
    [0x0030..0x0039] | [0x0660..0x0669] | [0x06f0..0x06f9] | [0x0966..0x096f] |
    [0x09e6..0x09ef] | [0x0a66..0x0a6f] | [0x0ae6..0x0aef] | [0x0b66..0x0b6f] |
    [0x0be7..0x0bef] | [0x0c66..0x0c6f] | [0x0ce6..0x0cef] | [0x0d66..0x0d6f] |
    [0x0e50..0x0e59] | [0x0ed0..0x0ed9] | [0x0f20..0x0f29] | [0xff10..0xff19];

  ivar_letter = unicode_letter | '$' | '_';
  ivar_letter_or_digit = unicode_letter | unicode_digit | '$' | '_';


  line_terminator = lf | cr | cr lf;
  input_character = [unicode_input_character - [cr + lf]];


  white_space = (sp | ht | ff | line_terminator);


  traditional_comment = '/*' not_star* ('*' (not_star_not_slash not_star*)?)* '*/';

  // The line terminator is made optional to accept comments on the last line
  // (followed by eof).

  slash_ivar_comment = '//' input_character* line_terminator?;
  dash_ivar_comment = '##' input_character* line_terminator?;


  underscores = '_'+;


  non_zero_digit = '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';
  digit = '0' | non_zero_digit;
  digit_or_underscore = digit | '_';
  digits_and_underscores = digit_or_underscore+;
  digits = digit | digit digits_and_underscores? digit;
  decimal_numeral = '0' | non_zero_digit digits? | non_zero_digit underscores digits;


  decimal_integer_literal = decimal_numeral;


  single_character = [input_character - [''' + '\']];
  escape_sequence = '\b' | '\t' | '\n' | '\f' | '\r' | '\"' | '\' ''' | '\\';
  string_character = [input_character - ['"' + '\']] | escape_sequence;

/*******************************************************************
 * States                                                          *
 *******************************************************************/


/*******************************************************************
 * Tokens                                                          *
 *******************************************************************/
Tokens

    ivar_comment = slash_ivar_comment | dash_ivar_comment;

    //
    // Ivar keywords
    //
    application_keyword = 'application';
    crud_create_keyword = 'create';
    crud_read_keyword = 'read';
    crud_update_keyword = 'update';
    crud_delete_keyword = 'delete';
    data_keyword = 'data';
    data_modifier_default_keyword = '*';
    import_keyword = 'import';
    roles_keyword = 'roles';
    role_modifier_allow = '+';
    role_modifier_deny = '-';
    scenario_keyword = 'scenario';

    lang = 'af'|'af-za'|'ar'|'ar-ae'|'ar-bh'|'ar-dz'|'ar-eg'|'ar-iq'|'ar-joaf'|'ar-kw'|'ar-lb'|'ar-ly'|'ar-ma'|'ar-om'|'ar-qa'|'ar-sa'|'ar-sy'|'ar-tn'|'ar-ye'|'az'|'az-az'|'be'|'be-by'|'bg'|'bg-bg'|'bs-ba'|'ca'|'ca-es'|'cs'|'cs-cz'|'cy'|'cy-gb'|'da'|'da-dk'|'de'|'de-at'|'de-ch'|'de-de'|'de-li'|'de-lu'|'dv'|'dv-mv'|'el'|'el-gr'|'en'|'en-au'|'en-bz'|'en-ca'|'en-cb'|'en-gb'|'en-ie'|'en-jm'|'en-nz'|'en-ph'|'en-tt'|'en-us'|'en-za'|'en-zw'|'eo'|'es'|'es-ar'|'es-bo'|'es-cl'|'es-co'|'es-cr'|'es-do'|'es-ec'|'es-es'|'es-gt'|'es-hn'|'es-mx'|'es-ni'|'es-pa'|'es-pe'|'es-pr'|'es-py'|'es-sv'|'es-uy'|'es-ve'|'et'|'et-ee'|'eu'|'eu-es'|'fa'|'fa-ir'|'fi'|'fi-fi'|'fo'|'fo-fo'|'fr'|'fr-be'|'fr-ca'|'fr-ch'|'fr-fr'|'fr-lu'|'fr-mc'|'gl'|'gl-es'|'gu'|'gu-in'|'he'|'he-il'|'hi'|'hi-in'|'hr'|'hr-ba'|'hr-hr'|'hu'|'hu-hu'|'hy'|'hy-am'|'id'|'id-id'|'is'|'is-is'|'it'|'it-ch'|'it-it'|'ja'|'ja-jp'|'ka'|'ka-ge'|'kk'|'kk-kz'|'kn'|'kn-in'|'ko'|'ko-kr'|'kok'|'kok-in'|'ky'|'ky-kg'|'lt'|'lt-lt'|'lv'|'lv-lv'|'mi'|'mi-nz'|'mk'|'mk-mk'|'mn'|'mn-mn'|'mr'|'mr-in'|'ms'|'ms-bn'|'ms-my'|'mt'|'mt-mt'|'nb'|'nb-no'|'nl'|'nl-be'|'nl-nl'|'nn-no'|'ns'|'ns-za'|'pa'|'pa-in'|'pl'|'pl-pl'|'ps'|'ps-ar'|'pt'|'pt-br'|'pt-pt'|'qu'|'qu-bo'|'qu-ec'|'qu-pe'|'ro'|'ro-ro'|'ru'|'ru-ru'|'sa'|'sa-in'|'se'|'se-fi'|'se-no'|'se-se'|'sk'|'sk-sk'|'sl'|'sl-si'|'sq'|'sq-al'|'sr-ba'|'sr-sp'|'sv'|'sv-fi'|'sv-se'|'sw'|'sw-ke'|'syr'|'syr-sy'|'ta'|'ta-in'|'te'|'te-in'|'th'|'th-th'|'tl'|'tl-ph'|'tn'|'tn-za'|'tr'|'tr-tr'|'tt'|'tt-ru'|'ts'|'uk'|'uk-ua'|'ur'|'ur-pk'|'uz'|'uz-uz'|'vi'|'vi-vn'|'xh'|'xh-za'|'zh'|'zh-cn'|'zh-hk'|'zh-mo'|'zh-sg'|'zh-tw'|'zu'|'zu-za';
    
    //
    // Ivar atomic types
    //
    amount_type_keyword = 'Amount';
    boolean_type_keyword = 'Boolean';
    date_type_keyword = 'Date';
    datetime_type_keyword = 'DateTime';
    file_type_keyword = 'File';
    formatedtext_type_keyword = 'Formatedtext';
    image_type_keyword = 'Image';
    integer_type_keyword = 'Integer';
    multitext_type_keyword = 'Multitext';
    number_type_keyword = 'Number';
    password_type_keyword = 'Password';
    percentile_type_keyword = 'Percentile';
    real_type_keyword = 'Real';
    text_type_keyword = 'Text';
    time_type_keyword = 'Time';


  integer_literal = decimal_integer_literal;
//  boolean_literal = 'true' | 'false';
//  character_literal = ''' single_character ''' | ''' escape_sequence ''';
  string_literal = '"' string_character* '"';


  identifier = ivar_letter ivar_letter_or_digit*;

    l_brc = '{';
    r_brc = '}';
    semi = ';';
    
    // For cardinality
    dotdot = '..';
    dotdotstar = '..*';

    // For import and FQDN
    dot   = '.';
    star = '*';

  // make a single long white_spaces token
  white_spaces = white_space+;

/*******************************************************************
 * Ignored Tokens                                                  *
 *******************************************************************/
Ignored Tokens

  white_spaces, ivar_comment;

/*******************************************************************
 * Productions                                                     *
 *******************************************************************/
Productions

    ivar_compilation_unit =
        compilation_unit;

    //
    //
    // Ivar used
    //
    //

    //
    // Name
    //

  name =
    identifier name_tail*;

  name_tail =
    dot identifier;



    //
    //
    // Ivar root
    //
    //
    compilation_unit =
        import_declarations? application_declaration scenario_declarations? dataset_declarations?;

    //
    // Import
    //
    import_declarations =
        {declaration} import_declaration |
        {declarations} import_declarations import_declaration;

    import_declaration =
        {single} single_type_import_declaration |
        {type} type_import_star_declaration;

    single_type_import_declaration =
        import_keyword name semi;

    type_import_star_declaration =
        import_keyword name dot star semi;

    //
    // Ivar Application declaration
    //
    application_declaration =
        application_keyword [application_keyname]:name [application_name]:string_literal lang semi;

    //
    // Scenario declaration
    //
    scenario_declarations =
        {declaration} scenario_declaration |
        {declarations} scenario_declarations scenario_declaration;

    scenario_declaration =
        {simple_scenario_declaration} simple_scenario_declaration |
        {complete_scenario_declaration} complete_scenario_declaration;

        // In case it will be useful later, if we need to have special things depending on CRUD
        //{create_scenario} scenario_keyword [scenario_keyname]:name [scenario_name]:string_literal? crud_create_keyword [scenario_data]:name l_brc scenario_elements r_brc |
        //{read_scenario} scenario_keyword [scenario_keyname]:name [scenario_name]:string_literal? crud_read_keyword [scenario_data]:name l_brc scenario_elements r_brc |
        //{update_scenario} scenario_keyword [scenario_keyname]:name [scenario_name]:string_literal? crud_update_keyword [scenario_data]:name l_brc scenario_elements r_brc |
        //{delete_scenario} scenario_keyword [scenario_keyname]:name [scenario_name]:string_literal? crud_delete_keyword [scenario_data]:name l_brc scenario_elements r_brc;

    complete_scenario_declaration =
        scenario_keyword [scenario_keyname]:name [scenario_name]:string_literal? crud_modifier [scenario_data]:name l_brc scenario_elements r_brc;

    simple_scenario_declaration =
        scenario_keyword [scenario_keyname]:name [scenario_name]:string_literal? crud_modifier [scenario_data]:name semi;

    crud_modifier = 
        {create} crud_create_keyword |
        {read} crud_read_keyword |
        {update} crud_update_keyword |
        {delete} crud_delete_keyword;

    // Scenario elements
    scenario_elements =
        {element} scenario_element |
        {elements} scenario_elements scenario_element;

    scenario_element =
        {scenario_roles_declaration} roles_declaration |
        //{jumps} jumps declaration |
        {simple_step} simple_step_declaration |
        {complete_step} complete_step_declaration |
        {simple_shadow} simple_shadow_step_declaration;

// TODO what attributes to keep on composite Step?
// For example, If a Bouteille has a Producteur, I may keep only Producteur first name.

    //
    // Step declaration
    //
    simple_shadow_step_declaration =
        [step_keyname]:name semi;

    simple_step_declaration =
        step_type cardinality [step_keyname]:name [step_name]:string_literal? semi;

    complete_step_declaration =
        step_type cardinality [step_keyname]:name [step_name]:string_literal? l_brc r_brc;


    step_type =
        {ivar_step_type} ivar_step_type |
        {custom_step_type} custom_step_type;

    ivar_step_type =
        {amount} amount_type_keyword |
        {boolean} boolean_type_keyword |
        {date} date_type_keyword |
        {datetime} datetime_type_keyword |
        {file} file_type_keyword |
        {formatedtext} formatedtext_type_keyword |
        {image} image_type_keyword |
        {integer} integer_type_keyword |
        {multitext} multitext_type_keyword |
        {number} number_type_keyword |
        {password} password_type_keyword |
        {percentile} percentile_type_keyword |
        {real} real_type_keyword |
        {text} text_type_keyword |
        {time} time_type_keyword;

    // TODO Check the start with uppercase
    custom_step_type =
        name;

    cardinality =
        {numbered_cardinality} numbered_cardinality |
        {star_cardinality} star_cardinality;

    star_cardinality = 
        [min]:integer_literal dotdotstar;

    numbered_cardinality = 
        [min]:integer_literal dotdot [max]:integer_literal;

    //
    // Roles declaration
    //
    roles_declaration =
        roles_keyword l_brc role_list r_brc;

    role_list = 
        {role} role |
        {roles} role_list role;

    role =
        role_modifier [role_keyname]:name [role_name]:string_literal? semi;

    role_modifier =
        {allow} role_modifier_allow |
        {deny} role_modifier_deny;

    //
    // Data declaration
    //
    dataset_declarations =
        {declaration} dataset_declaration |
        {declarations} dataset_declarations dataset_declaration;

// TODO add option to specify datasize, may also be computed by compiler.
// Not sure if it is interesting to put such possibility to end Ivar programmer.
// The danger is to include too much low level info here.

    dataset_declaration = 
        data_keyword [dataset_keyname]:name [dataset_name]:string_literal? l_brc data_list r_brc;

    data_list = 
        data_declaration*;

    data_declaration =
        data_modifier? [data_keyname]:name [data_value_in_lang]:string_literal? semi;

    data_modifier =
        data_modifier_default_keyword;