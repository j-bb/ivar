/* This file was generated by SableCC (http://www.sablecc.org/). */

package ivar.grammar.node;

import ivar.grammar.analysis.*;

@SuppressWarnings("nls")
public final class AStarCardinality extends PStarCardinality
{
    private TIntegerLiteral _min_;
    private TDotdotstar _dotdotstar_;

    public AStarCardinality()
    {
        // Constructor
    }

    public AStarCardinality(
        @SuppressWarnings("hiding") TIntegerLiteral _min_,
        @SuppressWarnings("hiding") TDotdotstar _dotdotstar_)
    {
        // Constructor
        setMin(_min_);

        setDotdotstar(_dotdotstar_);

    }

    @Override
    public Object clone()
    {
        return new AStarCardinality(
            cloneNode(this._min_),
            cloneNode(this._dotdotstar_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAStarCardinality(this);
    }

    public TIntegerLiteral getMin()
    {
        return this._min_;
    }

    public void setMin(TIntegerLiteral node)
    {
        if(this._min_ != null)
        {
            this._min_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._min_ = node;
    }

    public TDotdotstar getDotdotstar()
    {
        return this._dotdotstar_;
    }

    public void setDotdotstar(TDotdotstar node)
    {
        if(this._dotdotstar_ != null)
        {
            this._dotdotstar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dotdotstar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._min_)
            + toString(this._dotdotstar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._min_ == child)
        {
            this._min_ = null;
            return;
        }

        if(this._dotdotstar_ == child)
        {
            this._dotdotstar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._min_ == oldChild)
        {
            setMin((TIntegerLiteral) newChild);
            return;
        }

        if(this._dotdotstar_ == oldChild)
        {
            setDotdotstar((TDotdotstar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
