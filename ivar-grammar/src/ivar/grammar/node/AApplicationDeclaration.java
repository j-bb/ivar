/* This file was generated by SableCC (http://www.sablecc.org/). */

package ivar.grammar.node;

import ivar.grammar.analysis.*;

@SuppressWarnings("nls")
public final class AApplicationDeclaration extends PApplicationDeclaration
{
    private TApplicationKeyword _applicationKeyword_;
    private PName _applicationKeyname_;
    private TStringLiteral _applicationName_;
    private TLang _lang_;
    private TSemi _semi_;

    public AApplicationDeclaration()
    {
        // Constructor
    }

    public AApplicationDeclaration(
        @SuppressWarnings("hiding") TApplicationKeyword _applicationKeyword_,
        @SuppressWarnings("hiding") PName _applicationKeyname_,
        @SuppressWarnings("hiding") TStringLiteral _applicationName_,
        @SuppressWarnings("hiding") TLang _lang_,
        @SuppressWarnings("hiding") TSemi _semi_)
    {
        // Constructor
        setApplicationKeyword(_applicationKeyword_);

        setApplicationKeyname(_applicationKeyname_);

        setApplicationName(_applicationName_);

        setLang(_lang_);

        setSemi(_semi_);

    }

    @Override
    public Object clone()
    {
        return new AApplicationDeclaration(
            cloneNode(this._applicationKeyword_),
            cloneNode(this._applicationKeyname_),
            cloneNode(this._applicationName_),
            cloneNode(this._lang_),
            cloneNode(this._semi_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAApplicationDeclaration(this);
    }

    public TApplicationKeyword getApplicationKeyword()
    {
        return this._applicationKeyword_;
    }

    public void setApplicationKeyword(TApplicationKeyword node)
    {
        if(this._applicationKeyword_ != null)
        {
            this._applicationKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._applicationKeyword_ = node;
    }

    public PName getApplicationKeyname()
    {
        return this._applicationKeyname_;
    }

    public void setApplicationKeyname(PName node)
    {
        if(this._applicationKeyname_ != null)
        {
            this._applicationKeyname_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._applicationKeyname_ = node;
    }

    public TStringLiteral getApplicationName()
    {
        return this._applicationName_;
    }

    public void setApplicationName(TStringLiteral node)
    {
        if(this._applicationName_ != null)
        {
            this._applicationName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._applicationName_ = node;
    }

    public TLang getLang()
    {
        return this._lang_;
    }

    public void setLang(TLang node)
    {
        if(this._lang_ != null)
        {
            this._lang_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lang_ = node;
    }

    public TSemi getSemi()
    {
        return this._semi_;
    }

    public void setSemi(TSemi node)
    {
        if(this._semi_ != null)
        {
            this._semi_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semi_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._applicationKeyword_)
            + toString(this._applicationKeyname_)
            + toString(this._applicationName_)
            + toString(this._lang_)
            + toString(this._semi_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._applicationKeyword_ == child)
        {
            this._applicationKeyword_ = null;
            return;
        }

        if(this._applicationKeyname_ == child)
        {
            this._applicationKeyname_ = null;
            return;
        }

        if(this._applicationName_ == child)
        {
            this._applicationName_ = null;
            return;
        }

        if(this._lang_ == child)
        {
            this._lang_ = null;
            return;
        }

        if(this._semi_ == child)
        {
            this._semi_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._applicationKeyword_ == oldChild)
        {
            setApplicationKeyword((TApplicationKeyword) newChild);
            return;
        }

        if(this._applicationKeyname_ == oldChild)
        {
            setApplicationKeyname((PName) newChild);
            return;
        }

        if(this._applicationName_ == oldChild)
        {
            setApplicationName((TStringLiteral) newChild);
            return;
        }

        if(this._lang_ == oldChild)
        {
            setLang((TLang) newChild);
            return;
        }

        if(this._semi_ == oldChild)
        {
            setSemi((TSemi) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
