/* This file was generated by SableCC (http://www.sablecc.org/). */

package ivar.grammar.node;

import ivar.grammar.analysis.*;

@SuppressWarnings("nls")
public final class ANumberedCardinality extends PNumberedCardinality
{
    private TIntegerLiteral _min_;
    private TDotdot _dotdot_;
    private TIntegerLiteral _max_;

    public ANumberedCardinality()
    {
        // Constructor
    }

    public ANumberedCardinality(
        @SuppressWarnings("hiding") TIntegerLiteral _min_,
        @SuppressWarnings("hiding") TDotdot _dotdot_,
        @SuppressWarnings("hiding") TIntegerLiteral _max_)
    {
        // Constructor
        setMin(_min_);

        setDotdot(_dotdot_);

        setMax(_max_);

    }

    @Override
    public Object clone()
    {
        return new ANumberedCardinality(
            cloneNode(this._min_),
            cloneNode(this._dotdot_),
            cloneNode(this._max_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANumberedCardinality(this);
    }

    public TIntegerLiteral getMin()
    {
        return this._min_;
    }

    public void setMin(TIntegerLiteral node)
    {
        if(this._min_ != null)
        {
            this._min_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._min_ = node;
    }

    public TDotdot getDotdot()
    {
        return this._dotdot_;
    }

    public void setDotdot(TDotdot node)
    {
        if(this._dotdot_ != null)
        {
            this._dotdot_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dotdot_ = node;
    }

    public TIntegerLiteral getMax()
    {
        return this._max_;
    }

    public void setMax(TIntegerLiteral node)
    {
        if(this._max_ != null)
        {
            this._max_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._max_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._min_)
            + toString(this._dotdot_)
            + toString(this._max_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._min_ == child)
        {
            this._min_ = null;
            return;
        }

        if(this._dotdot_ == child)
        {
            this._dotdot_ = null;
            return;
        }

        if(this._max_ == child)
        {
            this._max_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._min_ == oldChild)
        {
            setMin((TIntegerLiteral) newChild);
            return;
        }

        if(this._dotdot_ == oldChild)
        {
            setDotdot((TDotdot) newChild);
            return;
        }

        if(this._max_ == oldChild)
        {
            setMax((TIntegerLiteral) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
