/* This file was generated by SableCC (http://www.sablecc.org/). */

package ivar.grammar.node;

import ivar.grammar.analysis.*;

@SuppressWarnings("nls")
public final class ACompleteStepDeclaration extends PCompleteStepDeclaration
{
    private PStepType _stepType_;
    private PCardinality _cardinality_;
    private PName _stepKeyname_;
    private TStringLiteral _stepName_;
    private TLBrc _lBrc_;
    private TRBrc _rBrc_;

    public ACompleteStepDeclaration()
    {
        // Constructor
    }

    public ACompleteStepDeclaration(
        @SuppressWarnings("hiding") PStepType _stepType_,
        @SuppressWarnings("hiding") PCardinality _cardinality_,
        @SuppressWarnings("hiding") PName _stepKeyname_,
        @SuppressWarnings("hiding") TStringLiteral _stepName_,
        @SuppressWarnings("hiding") TLBrc _lBrc_,
        @SuppressWarnings("hiding") TRBrc _rBrc_)
    {
        // Constructor
        setStepType(_stepType_);

        setCardinality(_cardinality_);

        setStepKeyname(_stepKeyname_);

        setStepName(_stepName_);

        setLBrc(_lBrc_);

        setRBrc(_rBrc_);

    }

    @Override
    public Object clone()
    {
        return new ACompleteStepDeclaration(
            cloneNode(this._stepType_),
            cloneNode(this._cardinality_),
            cloneNode(this._stepKeyname_),
            cloneNode(this._stepName_),
            cloneNode(this._lBrc_),
            cloneNode(this._rBrc_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACompleteStepDeclaration(this);
    }

    public PStepType getStepType()
    {
        return this._stepType_;
    }

    public void setStepType(PStepType node)
    {
        if(this._stepType_ != null)
        {
            this._stepType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stepType_ = node;
    }

    public PCardinality getCardinality()
    {
        return this._cardinality_;
    }

    public void setCardinality(PCardinality node)
    {
        if(this._cardinality_ != null)
        {
            this._cardinality_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cardinality_ = node;
    }

    public PName getStepKeyname()
    {
        return this._stepKeyname_;
    }

    public void setStepKeyname(PName node)
    {
        if(this._stepKeyname_ != null)
        {
            this._stepKeyname_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stepKeyname_ = node;
    }

    public TStringLiteral getStepName()
    {
        return this._stepName_;
    }

    public void setStepName(TStringLiteral node)
    {
        if(this._stepName_ != null)
        {
            this._stepName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stepName_ = node;
    }

    public TLBrc getLBrc()
    {
        return this._lBrc_;
    }

    public void setLBrc(TLBrc node)
    {
        if(this._lBrc_ != null)
        {
            this._lBrc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBrc_ = node;
    }

    public TRBrc getRBrc()
    {
        return this._rBrc_;
    }

    public void setRBrc(TRBrc node)
    {
        if(this._rBrc_ != null)
        {
            this._rBrc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rBrc_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._stepType_)
            + toString(this._cardinality_)
            + toString(this._stepKeyname_)
            + toString(this._stepName_)
            + toString(this._lBrc_)
            + toString(this._rBrc_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._stepType_ == child)
        {
            this._stepType_ = null;
            return;
        }

        if(this._cardinality_ == child)
        {
            this._cardinality_ = null;
            return;
        }

        if(this._stepKeyname_ == child)
        {
            this._stepKeyname_ = null;
            return;
        }

        if(this._stepName_ == child)
        {
            this._stepName_ = null;
            return;
        }

        if(this._lBrc_ == child)
        {
            this._lBrc_ = null;
            return;
        }

        if(this._rBrc_ == child)
        {
            this._rBrc_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._stepType_ == oldChild)
        {
            setStepType((PStepType) newChild);
            return;
        }

        if(this._cardinality_ == oldChild)
        {
            setCardinality((PCardinality) newChild);
            return;
        }

        if(this._stepKeyname_ == oldChild)
        {
            setStepKeyname((PName) newChild);
            return;
        }

        if(this._stepName_ == oldChild)
        {
            setStepName((TStringLiteral) newChild);
            return;
        }

        if(this._lBrc_ == oldChild)
        {
            setLBrc((TLBrc) newChild);
            return;
        }

        if(this._rBrc_ == oldChild)
        {
            setRBrc((TRBrc) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
