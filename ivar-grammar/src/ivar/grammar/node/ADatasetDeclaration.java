/* This file was generated by SableCC (http://www.sablecc.org/). */

package ivar.grammar.node;

import ivar.grammar.analysis.*;

@SuppressWarnings("nls")
public final class ADatasetDeclaration extends PDatasetDeclaration
{
    private TDataKeyword _dataKeyword_;
    private PName _datasetKeyname_;
    private TStringLiteral _datasetName_;
    private TLBrc _lBrc_;
    private PDataList _dataList_;
    private TRBrc _rBrc_;

    public ADatasetDeclaration()
    {
        // Constructor
    }

    public ADatasetDeclaration(
        @SuppressWarnings("hiding") TDataKeyword _dataKeyword_,
        @SuppressWarnings("hiding") PName _datasetKeyname_,
        @SuppressWarnings("hiding") TStringLiteral _datasetName_,
        @SuppressWarnings("hiding") TLBrc _lBrc_,
        @SuppressWarnings("hiding") PDataList _dataList_,
        @SuppressWarnings("hiding") TRBrc _rBrc_)
    {
        // Constructor
        setDataKeyword(_dataKeyword_);

        setDatasetKeyname(_datasetKeyname_);

        setDatasetName(_datasetName_);

        setLBrc(_lBrc_);

        setDataList(_dataList_);

        setRBrc(_rBrc_);

    }

    @Override
    public Object clone()
    {
        return new ADatasetDeclaration(
            cloneNode(this._dataKeyword_),
            cloneNode(this._datasetKeyname_),
            cloneNode(this._datasetName_),
            cloneNode(this._lBrc_),
            cloneNode(this._dataList_),
            cloneNode(this._rBrc_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADatasetDeclaration(this);
    }

    public TDataKeyword getDataKeyword()
    {
        return this._dataKeyword_;
    }

    public void setDataKeyword(TDataKeyword node)
    {
        if(this._dataKeyword_ != null)
        {
            this._dataKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dataKeyword_ = node;
    }

    public PName getDatasetKeyname()
    {
        return this._datasetKeyname_;
    }

    public void setDatasetKeyname(PName node)
    {
        if(this._datasetKeyname_ != null)
        {
            this._datasetKeyname_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._datasetKeyname_ = node;
    }

    public TStringLiteral getDatasetName()
    {
        return this._datasetName_;
    }

    public void setDatasetName(TStringLiteral node)
    {
        if(this._datasetName_ != null)
        {
            this._datasetName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._datasetName_ = node;
    }

    public TLBrc getLBrc()
    {
        return this._lBrc_;
    }

    public void setLBrc(TLBrc node)
    {
        if(this._lBrc_ != null)
        {
            this._lBrc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBrc_ = node;
    }

    public PDataList getDataList()
    {
        return this._dataList_;
    }

    public void setDataList(PDataList node)
    {
        if(this._dataList_ != null)
        {
            this._dataList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dataList_ = node;
    }

    public TRBrc getRBrc()
    {
        return this._rBrc_;
    }

    public void setRBrc(TRBrc node)
    {
        if(this._rBrc_ != null)
        {
            this._rBrc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rBrc_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._dataKeyword_)
            + toString(this._datasetKeyname_)
            + toString(this._datasetName_)
            + toString(this._lBrc_)
            + toString(this._dataList_)
            + toString(this._rBrc_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._dataKeyword_ == child)
        {
            this._dataKeyword_ = null;
            return;
        }

        if(this._datasetKeyname_ == child)
        {
            this._datasetKeyname_ = null;
            return;
        }

        if(this._datasetName_ == child)
        {
            this._datasetName_ = null;
            return;
        }

        if(this._lBrc_ == child)
        {
            this._lBrc_ = null;
            return;
        }

        if(this._dataList_ == child)
        {
            this._dataList_ = null;
            return;
        }

        if(this._rBrc_ == child)
        {
            this._rBrc_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._dataKeyword_ == oldChild)
        {
            setDataKeyword((TDataKeyword) newChild);
            return;
        }

        if(this._datasetKeyname_ == oldChild)
        {
            setDatasetKeyname((PName) newChild);
            return;
        }

        if(this._datasetName_ == oldChild)
        {
            setDatasetName((TStringLiteral) newChild);
            return;
        }

        if(this._lBrc_ == oldChild)
        {
            setLBrc((TLBrc) newChild);
            return;
        }

        if(this._dataList_ == oldChild)
        {
            setDataList((PDataList) newChild);
            return;
        }

        if(this._rBrc_ == oldChild)
        {
            setRBrc((TRBrc) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
