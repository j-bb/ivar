/* This file was generated by SableCC (http://www.sablecc.org/). */

package ivar.grammar.analysis;

import java.util.*;
import ivar.grammar.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIvarCompilationUnit(AIvarCompilationUnit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAName(AName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANameTail(ANameTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACompilationUnit(ACompilationUnit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclarationImportDeclarations(ADeclarationImportDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclarationsImportDeclarations(ADeclarationsImportDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleImportDeclaration(ASingleImportDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeImportDeclaration(ATypeImportDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleTypeImportDeclaration(ASingleTypeImportDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeImportStarDeclaration(ATypeImportStarDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAApplicationDeclaration(AApplicationDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclarationScenarioDeclarations(ADeclarationScenarioDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclarationsScenarioDeclarations(ADeclarationsScenarioDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleScenarioDeclarationScenarioDeclaration(ASimpleScenarioDeclarationScenarioDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACompleteScenarioDeclarationScenarioDeclaration(ACompleteScenarioDeclarationScenarioDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACompleteScenarioDeclaration(ACompleteScenarioDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleScenarioDeclaration(ASimpleScenarioDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACreateCrudModifier(ACreateCrudModifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReadCrudModifier(AReadCrudModifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUpdateCrudModifier(AUpdateCrudModifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeleteCrudModifier(ADeleteCrudModifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElementScenarioElements(AElementScenarioElements node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElementsScenarioElements(AElementsScenarioElements node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAScenarioRolesDeclarationScenarioElement(AScenarioRolesDeclarationScenarioElement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleStepScenarioElement(ASimpleStepScenarioElement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACompleteStepScenarioElement(ACompleteStepScenarioElement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleShadowScenarioElement(ASimpleShadowScenarioElement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleShadowStepDeclaration(ASimpleShadowStepDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleStepDeclaration(ASimpleStepDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACompleteStepDeclaration(ACompleteStepDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIvarStepTypeStepType(AIvarStepTypeStepType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACustomStepTypeStepType(ACustomStepTypeStepType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAmountIvarStepType(AAmountIvarStepType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABooleanIvarStepType(ABooleanIvarStepType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADateIvarStepType(ADateIvarStepType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADatetimeIvarStepType(ADatetimeIvarStepType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFileIvarStepType(AFileIvarStepType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFormatedtextIvarStepType(AFormatedtextIvarStepType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAImageIvarStepType(AImageIvarStepType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntegerIvarStepType(AIntegerIvarStepType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultitextIvarStepType(AMultitextIvarStepType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumberIvarStepType(ANumberIvarStepType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPasswordIvarStepType(APasswordIvarStepType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPercentileIvarStepType(APercentileIvarStepType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARealIvarStepType(ARealIvarStepType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATextIvarStepType(ATextIvarStepType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATimeIvarStepType(ATimeIvarStepType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACustomStepType(ACustomStepType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumberedCardinalityCardinality(ANumberedCardinalityCardinality node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStarCardinalityCardinality(AStarCardinalityCardinality node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStarCardinality(AStarCardinality node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumberedCardinality(ANumberedCardinality node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARolesDeclaration(ARolesDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARoleRoleList(ARoleRoleList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARolesRoleList(ARolesRoleList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARole(ARole node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAllowRoleModifier(AAllowRoleModifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADenyRoleModifier(ADenyRoleModifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclarationDatasetDeclarations(ADeclarationDatasetDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclarationsDatasetDeclarations(ADeclarationsDatasetDeclarations node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADatasetDeclaration(ADatasetDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADataList(ADataList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADataDeclaration(ADataDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADataModifier(ADataModifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIvarComment(TIvarComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTApplicationKeyword(TApplicationKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCrudCreateKeyword(TCrudCreateKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCrudReadKeyword(TCrudReadKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCrudUpdateKeyword(TCrudUpdateKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCrudDeleteKeyword(TCrudDeleteKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDataKeyword(TDataKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDataModifierDefaultKeyword(TDataModifierDefaultKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTImportKeyword(TImportKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRolesKeyword(TRolesKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRoleModifierAllow(TRoleModifierAllow node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRoleModifierDeny(TRoleModifierDeny node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTScenarioKeyword(TScenarioKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLang(TLang node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAmountTypeKeyword(TAmountTypeKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBooleanTypeKeyword(TBooleanTypeKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDateTypeKeyword(TDateTypeKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDatetimeTypeKeyword(TDatetimeTypeKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFileTypeKeyword(TFileTypeKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFormatedtextTypeKeyword(TFormatedtextTypeKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTImageTypeKeyword(TImageTypeKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIntegerTypeKeyword(TIntegerTypeKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMultitextTypeKeyword(TMultitextTypeKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumberTypeKeyword(TNumberTypeKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPasswordTypeKeyword(TPasswordTypeKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPercentileTypeKeyword(TPercentileTypeKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRealTypeKeyword(TRealTypeKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTextTypeKeyword(TTextTypeKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTimeTypeKeyword(TTimeTypeKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIntegerLiteral(TIntegerLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStringLiteral(TStringLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLBrc(TLBrc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRBrc(TRBrc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemi(TSemi node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDotdot(TDotdot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDotdotstar(TDotdotstar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStar(TStar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhiteSpaces(TWhiteSpaces node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
