/* This file was generated by SableCC (http://www.sablecc.org/). */

package ivar.grammar.analysis;

import java.util.*;
import ivar.grammar.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPIvarCompilationUnit().apply(this);
        outStart(node);
    }

    public void inAIvarCompilationUnit(AIvarCompilationUnit node)
    {
        defaultIn(node);
    }

    public void outAIvarCompilationUnit(AIvarCompilationUnit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIvarCompilationUnit(AIvarCompilationUnit node)
    {
        inAIvarCompilationUnit(node);
        if(node.getCompilationUnit() != null)
        {
            node.getCompilationUnit().apply(this);
        }
        outAIvarCompilationUnit(node);
    }

    public void inAName(AName node)
    {
        defaultIn(node);
    }

    public void outAName(AName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAName(AName node)
    {
        inAName(node);
        {
            List<PNameTail> copy = new ArrayList<PNameTail>(node.getNameTail());
            Collections.reverse(copy);
            for(PNameTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAName(node);
    }

    public void inANameTail(ANameTail node)
    {
        defaultIn(node);
    }

    public void outANameTail(ANameTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameTail(ANameTail node)
    {
        inANameTail(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outANameTail(node);
    }

    public void inACompilationUnit(ACompilationUnit node)
    {
        defaultIn(node);
    }

    public void outACompilationUnit(ACompilationUnit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompilationUnit(ACompilationUnit node)
    {
        inACompilationUnit(node);
        if(node.getDatasetDeclarations() != null)
        {
            node.getDatasetDeclarations().apply(this);
        }
        if(node.getScenarioDeclarations() != null)
        {
            node.getScenarioDeclarations().apply(this);
        }
        if(node.getApplicationDeclaration() != null)
        {
            node.getApplicationDeclaration().apply(this);
        }
        if(node.getImportDeclarations() != null)
        {
            node.getImportDeclarations().apply(this);
        }
        outACompilationUnit(node);
    }

    public void inADeclarationImportDeclarations(ADeclarationImportDeclarations node)
    {
        defaultIn(node);
    }

    public void outADeclarationImportDeclarations(ADeclarationImportDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationImportDeclarations(ADeclarationImportDeclarations node)
    {
        inADeclarationImportDeclarations(node);
        if(node.getImportDeclaration() != null)
        {
            node.getImportDeclaration().apply(this);
        }
        outADeclarationImportDeclarations(node);
    }

    public void inADeclarationsImportDeclarations(ADeclarationsImportDeclarations node)
    {
        defaultIn(node);
    }

    public void outADeclarationsImportDeclarations(ADeclarationsImportDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationsImportDeclarations(ADeclarationsImportDeclarations node)
    {
        inADeclarationsImportDeclarations(node);
        if(node.getImportDeclaration() != null)
        {
            node.getImportDeclaration().apply(this);
        }
        if(node.getImportDeclarations() != null)
        {
            node.getImportDeclarations().apply(this);
        }
        outADeclarationsImportDeclarations(node);
    }

    public void inASingleImportDeclaration(ASingleImportDeclaration node)
    {
        defaultIn(node);
    }

    public void outASingleImportDeclaration(ASingleImportDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleImportDeclaration(ASingleImportDeclaration node)
    {
        inASingleImportDeclaration(node);
        if(node.getSingleTypeImportDeclaration() != null)
        {
            node.getSingleTypeImportDeclaration().apply(this);
        }
        outASingleImportDeclaration(node);
    }

    public void inATypeImportDeclaration(ATypeImportDeclaration node)
    {
        defaultIn(node);
    }

    public void outATypeImportDeclaration(ATypeImportDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeImportDeclaration(ATypeImportDeclaration node)
    {
        inATypeImportDeclaration(node);
        if(node.getTypeImportStarDeclaration() != null)
        {
            node.getTypeImportStarDeclaration().apply(this);
        }
        outATypeImportDeclaration(node);
    }

    public void inASingleTypeImportDeclaration(ASingleTypeImportDeclaration node)
    {
        defaultIn(node);
    }

    public void outASingleTypeImportDeclaration(ASingleTypeImportDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleTypeImportDeclaration(ASingleTypeImportDeclaration node)
    {
        inASingleTypeImportDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getImportKeyword() != null)
        {
            node.getImportKeyword().apply(this);
        }
        outASingleTypeImportDeclaration(node);
    }

    public void inATypeImportStarDeclaration(ATypeImportStarDeclaration node)
    {
        defaultIn(node);
    }

    public void outATypeImportStarDeclaration(ATypeImportStarDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeImportStarDeclaration(ATypeImportStarDeclaration node)
    {
        inATypeImportStarDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getImportKeyword() != null)
        {
            node.getImportKeyword().apply(this);
        }
        outATypeImportStarDeclaration(node);
    }

    public void inAApplicationDeclaration(AApplicationDeclaration node)
    {
        defaultIn(node);
    }

    public void outAApplicationDeclaration(AApplicationDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAApplicationDeclaration(AApplicationDeclaration node)
    {
        inAApplicationDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getLang() != null)
        {
            node.getLang().apply(this);
        }
        if(node.getApplicationName() != null)
        {
            node.getApplicationName().apply(this);
        }
        if(node.getApplicationKeyname() != null)
        {
            node.getApplicationKeyname().apply(this);
        }
        if(node.getApplicationKeyword() != null)
        {
            node.getApplicationKeyword().apply(this);
        }
        outAApplicationDeclaration(node);
    }

    public void inADeclarationScenarioDeclarations(ADeclarationScenarioDeclarations node)
    {
        defaultIn(node);
    }

    public void outADeclarationScenarioDeclarations(ADeclarationScenarioDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationScenarioDeclarations(ADeclarationScenarioDeclarations node)
    {
        inADeclarationScenarioDeclarations(node);
        if(node.getScenarioDeclaration() != null)
        {
            node.getScenarioDeclaration().apply(this);
        }
        outADeclarationScenarioDeclarations(node);
    }

    public void inADeclarationsScenarioDeclarations(ADeclarationsScenarioDeclarations node)
    {
        defaultIn(node);
    }

    public void outADeclarationsScenarioDeclarations(ADeclarationsScenarioDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationsScenarioDeclarations(ADeclarationsScenarioDeclarations node)
    {
        inADeclarationsScenarioDeclarations(node);
        if(node.getScenarioDeclaration() != null)
        {
            node.getScenarioDeclaration().apply(this);
        }
        if(node.getScenarioDeclarations() != null)
        {
            node.getScenarioDeclarations().apply(this);
        }
        outADeclarationsScenarioDeclarations(node);
    }

    public void inASimpleScenarioDeclarationScenarioDeclaration(ASimpleScenarioDeclarationScenarioDeclaration node)
    {
        defaultIn(node);
    }

    public void outASimpleScenarioDeclarationScenarioDeclaration(ASimpleScenarioDeclarationScenarioDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleScenarioDeclarationScenarioDeclaration(ASimpleScenarioDeclarationScenarioDeclaration node)
    {
        inASimpleScenarioDeclarationScenarioDeclaration(node);
        if(node.getSimpleScenarioDeclaration() != null)
        {
            node.getSimpleScenarioDeclaration().apply(this);
        }
        outASimpleScenarioDeclarationScenarioDeclaration(node);
    }

    public void inACompleteScenarioDeclarationScenarioDeclaration(ACompleteScenarioDeclarationScenarioDeclaration node)
    {
        defaultIn(node);
    }

    public void outACompleteScenarioDeclarationScenarioDeclaration(ACompleteScenarioDeclarationScenarioDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompleteScenarioDeclarationScenarioDeclaration(ACompleteScenarioDeclarationScenarioDeclaration node)
    {
        inACompleteScenarioDeclarationScenarioDeclaration(node);
        if(node.getCompleteScenarioDeclaration() != null)
        {
            node.getCompleteScenarioDeclaration().apply(this);
        }
        outACompleteScenarioDeclarationScenarioDeclaration(node);
    }

    public void inACompleteScenarioDeclaration(ACompleteScenarioDeclaration node)
    {
        defaultIn(node);
    }

    public void outACompleteScenarioDeclaration(ACompleteScenarioDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompleteScenarioDeclaration(ACompleteScenarioDeclaration node)
    {
        inACompleteScenarioDeclaration(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        if(node.getScenarioElements() != null)
        {
            node.getScenarioElements().apply(this);
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getScenarioData() != null)
        {
            node.getScenarioData().apply(this);
        }
        if(node.getCrudModifier() != null)
        {
            node.getCrudModifier().apply(this);
        }
        if(node.getScenarioName() != null)
        {
            node.getScenarioName().apply(this);
        }
        if(node.getScenarioKeyname() != null)
        {
            node.getScenarioKeyname().apply(this);
        }
        if(node.getScenarioKeyword() != null)
        {
            node.getScenarioKeyword().apply(this);
        }
        outACompleteScenarioDeclaration(node);
    }

    public void inASimpleScenarioDeclaration(ASimpleScenarioDeclaration node)
    {
        defaultIn(node);
    }

    public void outASimpleScenarioDeclaration(ASimpleScenarioDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleScenarioDeclaration(ASimpleScenarioDeclaration node)
    {
        inASimpleScenarioDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getScenarioData() != null)
        {
            node.getScenarioData().apply(this);
        }
        if(node.getCrudModifier() != null)
        {
            node.getCrudModifier().apply(this);
        }
        if(node.getScenarioName() != null)
        {
            node.getScenarioName().apply(this);
        }
        if(node.getScenarioKeyname() != null)
        {
            node.getScenarioKeyname().apply(this);
        }
        if(node.getScenarioKeyword() != null)
        {
            node.getScenarioKeyword().apply(this);
        }
        outASimpleScenarioDeclaration(node);
    }

    public void inACreateCrudModifier(ACreateCrudModifier node)
    {
        defaultIn(node);
    }

    public void outACreateCrudModifier(ACreateCrudModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACreateCrudModifier(ACreateCrudModifier node)
    {
        inACreateCrudModifier(node);
        if(node.getCrudCreateKeyword() != null)
        {
            node.getCrudCreateKeyword().apply(this);
        }
        outACreateCrudModifier(node);
    }

    public void inAReadCrudModifier(AReadCrudModifier node)
    {
        defaultIn(node);
    }

    public void outAReadCrudModifier(AReadCrudModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReadCrudModifier(AReadCrudModifier node)
    {
        inAReadCrudModifier(node);
        if(node.getCrudReadKeyword() != null)
        {
            node.getCrudReadKeyword().apply(this);
        }
        outAReadCrudModifier(node);
    }

    public void inAUpdateCrudModifier(AUpdateCrudModifier node)
    {
        defaultIn(node);
    }

    public void outAUpdateCrudModifier(AUpdateCrudModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUpdateCrudModifier(AUpdateCrudModifier node)
    {
        inAUpdateCrudModifier(node);
        if(node.getCrudUpdateKeyword() != null)
        {
            node.getCrudUpdateKeyword().apply(this);
        }
        outAUpdateCrudModifier(node);
    }

    public void inADeleteCrudModifier(ADeleteCrudModifier node)
    {
        defaultIn(node);
    }

    public void outADeleteCrudModifier(ADeleteCrudModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeleteCrudModifier(ADeleteCrudModifier node)
    {
        inADeleteCrudModifier(node);
        if(node.getCrudDeleteKeyword() != null)
        {
            node.getCrudDeleteKeyword().apply(this);
        }
        outADeleteCrudModifier(node);
    }

    public void inAElementScenarioElements(AElementScenarioElements node)
    {
        defaultIn(node);
    }

    public void outAElementScenarioElements(AElementScenarioElements node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElementScenarioElements(AElementScenarioElements node)
    {
        inAElementScenarioElements(node);
        if(node.getScenarioElement() != null)
        {
            node.getScenarioElement().apply(this);
        }
        outAElementScenarioElements(node);
    }

    public void inAElementsScenarioElements(AElementsScenarioElements node)
    {
        defaultIn(node);
    }

    public void outAElementsScenarioElements(AElementsScenarioElements node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElementsScenarioElements(AElementsScenarioElements node)
    {
        inAElementsScenarioElements(node);
        if(node.getScenarioElement() != null)
        {
            node.getScenarioElement().apply(this);
        }
        if(node.getScenarioElements() != null)
        {
            node.getScenarioElements().apply(this);
        }
        outAElementsScenarioElements(node);
    }

    public void inAScenarioRolesDeclarationScenarioElement(AScenarioRolesDeclarationScenarioElement node)
    {
        defaultIn(node);
    }

    public void outAScenarioRolesDeclarationScenarioElement(AScenarioRolesDeclarationScenarioElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAScenarioRolesDeclarationScenarioElement(AScenarioRolesDeclarationScenarioElement node)
    {
        inAScenarioRolesDeclarationScenarioElement(node);
        if(node.getRolesDeclaration() != null)
        {
            node.getRolesDeclaration().apply(this);
        }
        outAScenarioRolesDeclarationScenarioElement(node);
    }

    public void inASimpleStepScenarioElement(ASimpleStepScenarioElement node)
    {
        defaultIn(node);
    }

    public void outASimpleStepScenarioElement(ASimpleStepScenarioElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleStepScenarioElement(ASimpleStepScenarioElement node)
    {
        inASimpleStepScenarioElement(node);
        if(node.getSimpleStepDeclaration() != null)
        {
            node.getSimpleStepDeclaration().apply(this);
        }
        outASimpleStepScenarioElement(node);
    }

    public void inACompleteStepScenarioElement(ACompleteStepScenarioElement node)
    {
        defaultIn(node);
    }

    public void outACompleteStepScenarioElement(ACompleteStepScenarioElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompleteStepScenarioElement(ACompleteStepScenarioElement node)
    {
        inACompleteStepScenarioElement(node);
        if(node.getCompleteStepDeclaration() != null)
        {
            node.getCompleteStepDeclaration().apply(this);
        }
        outACompleteStepScenarioElement(node);
    }

    public void inASimpleShadowScenarioElement(ASimpleShadowScenarioElement node)
    {
        defaultIn(node);
    }

    public void outASimpleShadowScenarioElement(ASimpleShadowScenarioElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleShadowScenarioElement(ASimpleShadowScenarioElement node)
    {
        inASimpleShadowScenarioElement(node);
        if(node.getSimpleShadowStepDeclaration() != null)
        {
            node.getSimpleShadowStepDeclaration().apply(this);
        }
        outASimpleShadowScenarioElement(node);
    }

    public void inASimpleShadowStepDeclaration(ASimpleShadowStepDeclaration node)
    {
        defaultIn(node);
    }

    public void outASimpleShadowStepDeclaration(ASimpleShadowStepDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleShadowStepDeclaration(ASimpleShadowStepDeclaration node)
    {
        inASimpleShadowStepDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getStepKeyname() != null)
        {
            node.getStepKeyname().apply(this);
        }
        outASimpleShadowStepDeclaration(node);
    }

    public void inASimpleStepDeclaration(ASimpleStepDeclaration node)
    {
        defaultIn(node);
    }

    public void outASimpleStepDeclaration(ASimpleStepDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleStepDeclaration(ASimpleStepDeclaration node)
    {
        inASimpleStepDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getStepName() != null)
        {
            node.getStepName().apply(this);
        }
        if(node.getStepKeyname() != null)
        {
            node.getStepKeyname().apply(this);
        }
        if(node.getCardinality() != null)
        {
            node.getCardinality().apply(this);
        }
        if(node.getStepType() != null)
        {
            node.getStepType().apply(this);
        }
        outASimpleStepDeclaration(node);
    }

    public void inACompleteStepDeclaration(ACompleteStepDeclaration node)
    {
        defaultIn(node);
    }

    public void outACompleteStepDeclaration(ACompleteStepDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompleteStepDeclaration(ACompleteStepDeclaration node)
    {
        inACompleteStepDeclaration(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getStepName() != null)
        {
            node.getStepName().apply(this);
        }
        if(node.getStepKeyname() != null)
        {
            node.getStepKeyname().apply(this);
        }
        if(node.getCardinality() != null)
        {
            node.getCardinality().apply(this);
        }
        if(node.getStepType() != null)
        {
            node.getStepType().apply(this);
        }
        outACompleteStepDeclaration(node);
    }

    public void inAIvarStepTypeStepType(AIvarStepTypeStepType node)
    {
        defaultIn(node);
    }

    public void outAIvarStepTypeStepType(AIvarStepTypeStepType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIvarStepTypeStepType(AIvarStepTypeStepType node)
    {
        inAIvarStepTypeStepType(node);
        if(node.getIvarStepType() != null)
        {
            node.getIvarStepType().apply(this);
        }
        outAIvarStepTypeStepType(node);
    }

    public void inACustomStepTypeStepType(ACustomStepTypeStepType node)
    {
        defaultIn(node);
    }

    public void outACustomStepTypeStepType(ACustomStepTypeStepType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACustomStepTypeStepType(ACustomStepTypeStepType node)
    {
        inACustomStepTypeStepType(node);
        if(node.getCustomStepType() != null)
        {
            node.getCustomStepType().apply(this);
        }
        outACustomStepTypeStepType(node);
    }

    public void inAAmountIvarStepType(AAmountIvarStepType node)
    {
        defaultIn(node);
    }

    public void outAAmountIvarStepType(AAmountIvarStepType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAmountIvarStepType(AAmountIvarStepType node)
    {
        inAAmountIvarStepType(node);
        if(node.getAmountTypeKeyword() != null)
        {
            node.getAmountTypeKeyword().apply(this);
        }
        outAAmountIvarStepType(node);
    }

    public void inABooleanIvarStepType(ABooleanIvarStepType node)
    {
        defaultIn(node);
    }

    public void outABooleanIvarStepType(ABooleanIvarStepType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanIvarStepType(ABooleanIvarStepType node)
    {
        inABooleanIvarStepType(node);
        if(node.getBooleanTypeKeyword() != null)
        {
            node.getBooleanTypeKeyword().apply(this);
        }
        outABooleanIvarStepType(node);
    }

    public void inADateIvarStepType(ADateIvarStepType node)
    {
        defaultIn(node);
    }

    public void outADateIvarStepType(ADateIvarStepType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADateIvarStepType(ADateIvarStepType node)
    {
        inADateIvarStepType(node);
        if(node.getDateTypeKeyword() != null)
        {
            node.getDateTypeKeyword().apply(this);
        }
        outADateIvarStepType(node);
    }

    public void inADatetimeIvarStepType(ADatetimeIvarStepType node)
    {
        defaultIn(node);
    }

    public void outADatetimeIvarStepType(ADatetimeIvarStepType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADatetimeIvarStepType(ADatetimeIvarStepType node)
    {
        inADatetimeIvarStepType(node);
        if(node.getDatetimeTypeKeyword() != null)
        {
            node.getDatetimeTypeKeyword().apply(this);
        }
        outADatetimeIvarStepType(node);
    }

    public void inAFileIvarStepType(AFileIvarStepType node)
    {
        defaultIn(node);
    }

    public void outAFileIvarStepType(AFileIvarStepType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFileIvarStepType(AFileIvarStepType node)
    {
        inAFileIvarStepType(node);
        if(node.getFileTypeKeyword() != null)
        {
            node.getFileTypeKeyword().apply(this);
        }
        outAFileIvarStepType(node);
    }

    public void inAFormatedtextIvarStepType(AFormatedtextIvarStepType node)
    {
        defaultIn(node);
    }

    public void outAFormatedtextIvarStepType(AFormatedtextIvarStepType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormatedtextIvarStepType(AFormatedtextIvarStepType node)
    {
        inAFormatedtextIvarStepType(node);
        if(node.getFormatedtextTypeKeyword() != null)
        {
            node.getFormatedtextTypeKeyword().apply(this);
        }
        outAFormatedtextIvarStepType(node);
    }

    public void inAImageIvarStepType(AImageIvarStepType node)
    {
        defaultIn(node);
    }

    public void outAImageIvarStepType(AImageIvarStepType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImageIvarStepType(AImageIvarStepType node)
    {
        inAImageIvarStepType(node);
        if(node.getImageTypeKeyword() != null)
        {
            node.getImageTypeKeyword().apply(this);
        }
        outAImageIvarStepType(node);
    }

    public void inAIntegerIvarStepType(AIntegerIvarStepType node)
    {
        defaultIn(node);
    }

    public void outAIntegerIvarStepType(AIntegerIvarStepType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerIvarStepType(AIntegerIvarStepType node)
    {
        inAIntegerIvarStepType(node);
        if(node.getIntegerTypeKeyword() != null)
        {
            node.getIntegerTypeKeyword().apply(this);
        }
        outAIntegerIvarStepType(node);
    }

    public void inAMultitextIvarStepType(AMultitextIvarStepType node)
    {
        defaultIn(node);
    }

    public void outAMultitextIvarStepType(AMultitextIvarStepType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultitextIvarStepType(AMultitextIvarStepType node)
    {
        inAMultitextIvarStepType(node);
        if(node.getMultitextTypeKeyword() != null)
        {
            node.getMultitextTypeKeyword().apply(this);
        }
        outAMultitextIvarStepType(node);
    }

    public void inANumberIvarStepType(ANumberIvarStepType node)
    {
        defaultIn(node);
    }

    public void outANumberIvarStepType(ANumberIvarStepType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberIvarStepType(ANumberIvarStepType node)
    {
        inANumberIvarStepType(node);
        if(node.getNumberTypeKeyword() != null)
        {
            node.getNumberTypeKeyword().apply(this);
        }
        outANumberIvarStepType(node);
    }

    public void inAPasswordIvarStepType(APasswordIvarStepType node)
    {
        defaultIn(node);
    }

    public void outAPasswordIvarStepType(APasswordIvarStepType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPasswordIvarStepType(APasswordIvarStepType node)
    {
        inAPasswordIvarStepType(node);
        if(node.getPasswordTypeKeyword() != null)
        {
            node.getPasswordTypeKeyword().apply(this);
        }
        outAPasswordIvarStepType(node);
    }

    public void inAPercentileIvarStepType(APercentileIvarStepType node)
    {
        defaultIn(node);
    }

    public void outAPercentileIvarStepType(APercentileIvarStepType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPercentileIvarStepType(APercentileIvarStepType node)
    {
        inAPercentileIvarStepType(node);
        if(node.getPercentileTypeKeyword() != null)
        {
            node.getPercentileTypeKeyword().apply(this);
        }
        outAPercentileIvarStepType(node);
    }

    public void inARealIvarStepType(ARealIvarStepType node)
    {
        defaultIn(node);
    }

    public void outARealIvarStepType(ARealIvarStepType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealIvarStepType(ARealIvarStepType node)
    {
        inARealIvarStepType(node);
        if(node.getRealTypeKeyword() != null)
        {
            node.getRealTypeKeyword().apply(this);
        }
        outARealIvarStepType(node);
    }

    public void inATextIvarStepType(ATextIvarStepType node)
    {
        defaultIn(node);
    }

    public void outATextIvarStepType(ATextIvarStepType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATextIvarStepType(ATextIvarStepType node)
    {
        inATextIvarStepType(node);
        if(node.getTextTypeKeyword() != null)
        {
            node.getTextTypeKeyword().apply(this);
        }
        outATextIvarStepType(node);
    }

    public void inATimeIvarStepType(ATimeIvarStepType node)
    {
        defaultIn(node);
    }

    public void outATimeIvarStepType(ATimeIvarStepType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATimeIvarStepType(ATimeIvarStepType node)
    {
        inATimeIvarStepType(node);
        if(node.getTimeTypeKeyword() != null)
        {
            node.getTimeTypeKeyword().apply(this);
        }
        outATimeIvarStepType(node);
    }

    public void inACustomStepType(ACustomStepType node)
    {
        defaultIn(node);
    }

    public void outACustomStepType(ACustomStepType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACustomStepType(ACustomStepType node)
    {
        inACustomStepType(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outACustomStepType(node);
    }

    public void inANumberedCardinalityCardinality(ANumberedCardinalityCardinality node)
    {
        defaultIn(node);
    }

    public void outANumberedCardinalityCardinality(ANumberedCardinalityCardinality node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberedCardinalityCardinality(ANumberedCardinalityCardinality node)
    {
        inANumberedCardinalityCardinality(node);
        if(node.getNumberedCardinality() != null)
        {
            node.getNumberedCardinality().apply(this);
        }
        outANumberedCardinalityCardinality(node);
    }

    public void inAStarCardinalityCardinality(AStarCardinalityCardinality node)
    {
        defaultIn(node);
    }

    public void outAStarCardinalityCardinality(AStarCardinalityCardinality node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStarCardinalityCardinality(AStarCardinalityCardinality node)
    {
        inAStarCardinalityCardinality(node);
        if(node.getStarCardinality() != null)
        {
            node.getStarCardinality().apply(this);
        }
        outAStarCardinalityCardinality(node);
    }

    public void inAStarCardinality(AStarCardinality node)
    {
        defaultIn(node);
    }

    public void outAStarCardinality(AStarCardinality node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStarCardinality(AStarCardinality node)
    {
        inAStarCardinality(node);
        if(node.getDotdotstar() != null)
        {
            node.getDotdotstar().apply(this);
        }
        if(node.getMin() != null)
        {
            node.getMin().apply(this);
        }
        outAStarCardinality(node);
    }

    public void inANumberedCardinality(ANumberedCardinality node)
    {
        defaultIn(node);
    }

    public void outANumberedCardinality(ANumberedCardinality node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberedCardinality(ANumberedCardinality node)
    {
        inANumberedCardinality(node);
        if(node.getMax() != null)
        {
            node.getMax().apply(this);
        }
        if(node.getDotdot() != null)
        {
            node.getDotdot().apply(this);
        }
        if(node.getMin() != null)
        {
            node.getMin().apply(this);
        }
        outANumberedCardinality(node);
    }

    public void inARolesDeclaration(ARolesDeclaration node)
    {
        defaultIn(node);
    }

    public void outARolesDeclaration(ARolesDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARolesDeclaration(ARolesDeclaration node)
    {
        inARolesDeclaration(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        if(node.getRoleList() != null)
        {
            node.getRoleList().apply(this);
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getRolesKeyword() != null)
        {
            node.getRolesKeyword().apply(this);
        }
        outARolesDeclaration(node);
    }

    public void inARoleRoleList(ARoleRoleList node)
    {
        defaultIn(node);
    }

    public void outARoleRoleList(ARoleRoleList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARoleRoleList(ARoleRoleList node)
    {
        inARoleRoleList(node);
        if(node.getRole() != null)
        {
            node.getRole().apply(this);
        }
        outARoleRoleList(node);
    }

    public void inARolesRoleList(ARolesRoleList node)
    {
        defaultIn(node);
    }

    public void outARolesRoleList(ARolesRoleList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARolesRoleList(ARolesRoleList node)
    {
        inARolesRoleList(node);
        if(node.getRole() != null)
        {
            node.getRole().apply(this);
        }
        if(node.getRoleList() != null)
        {
            node.getRoleList().apply(this);
        }
        outARolesRoleList(node);
    }

    public void inARole(ARole node)
    {
        defaultIn(node);
    }

    public void outARole(ARole node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARole(ARole node)
    {
        inARole(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getRoleName() != null)
        {
            node.getRoleName().apply(this);
        }
        if(node.getRoleKeyname() != null)
        {
            node.getRoleKeyname().apply(this);
        }
        if(node.getRoleModifier() != null)
        {
            node.getRoleModifier().apply(this);
        }
        outARole(node);
    }

    public void inAAllowRoleModifier(AAllowRoleModifier node)
    {
        defaultIn(node);
    }

    public void outAAllowRoleModifier(AAllowRoleModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAllowRoleModifier(AAllowRoleModifier node)
    {
        inAAllowRoleModifier(node);
        if(node.getRoleModifierAllow() != null)
        {
            node.getRoleModifierAllow().apply(this);
        }
        outAAllowRoleModifier(node);
    }

    public void inADenyRoleModifier(ADenyRoleModifier node)
    {
        defaultIn(node);
    }

    public void outADenyRoleModifier(ADenyRoleModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADenyRoleModifier(ADenyRoleModifier node)
    {
        inADenyRoleModifier(node);
        if(node.getRoleModifierDeny() != null)
        {
            node.getRoleModifierDeny().apply(this);
        }
        outADenyRoleModifier(node);
    }

    public void inADeclarationDatasetDeclarations(ADeclarationDatasetDeclarations node)
    {
        defaultIn(node);
    }

    public void outADeclarationDatasetDeclarations(ADeclarationDatasetDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationDatasetDeclarations(ADeclarationDatasetDeclarations node)
    {
        inADeclarationDatasetDeclarations(node);
        if(node.getDatasetDeclaration() != null)
        {
            node.getDatasetDeclaration().apply(this);
        }
        outADeclarationDatasetDeclarations(node);
    }

    public void inADeclarationsDatasetDeclarations(ADeclarationsDatasetDeclarations node)
    {
        defaultIn(node);
    }

    public void outADeclarationsDatasetDeclarations(ADeclarationsDatasetDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationsDatasetDeclarations(ADeclarationsDatasetDeclarations node)
    {
        inADeclarationsDatasetDeclarations(node);
        if(node.getDatasetDeclaration() != null)
        {
            node.getDatasetDeclaration().apply(this);
        }
        if(node.getDatasetDeclarations() != null)
        {
            node.getDatasetDeclarations().apply(this);
        }
        outADeclarationsDatasetDeclarations(node);
    }

    public void inADatasetDeclaration(ADatasetDeclaration node)
    {
        defaultIn(node);
    }

    public void outADatasetDeclaration(ADatasetDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADatasetDeclaration(ADatasetDeclaration node)
    {
        inADatasetDeclaration(node);
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        if(node.getDataList() != null)
        {
            node.getDataList().apply(this);
        }
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        if(node.getDatasetName() != null)
        {
            node.getDatasetName().apply(this);
        }
        if(node.getDatasetKeyname() != null)
        {
            node.getDatasetKeyname().apply(this);
        }
        if(node.getDataKeyword() != null)
        {
            node.getDataKeyword().apply(this);
        }
        outADatasetDeclaration(node);
    }

    public void inADataList(ADataList node)
    {
        defaultIn(node);
    }

    public void outADataList(ADataList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADataList(ADataList node)
    {
        inADataList(node);
        {
            List<PDataDeclaration> copy = new ArrayList<PDataDeclaration>(node.getDataDeclaration());
            Collections.reverse(copy);
            for(PDataDeclaration e : copy)
            {
                e.apply(this);
            }
        }
        outADataList(node);
    }

    public void inADataDeclaration(ADataDeclaration node)
    {
        defaultIn(node);
    }

    public void outADataDeclaration(ADataDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADataDeclaration(ADataDeclaration node)
    {
        inADataDeclaration(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getDataValueInLang() != null)
        {
            node.getDataValueInLang().apply(this);
        }
        if(node.getDataKeyname() != null)
        {
            node.getDataKeyname().apply(this);
        }
        if(node.getDataModifier() != null)
        {
            node.getDataModifier().apply(this);
        }
        outADataDeclaration(node);
    }

    public void inADataModifier(ADataModifier node)
    {
        defaultIn(node);
    }

    public void outADataModifier(ADataModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADataModifier(ADataModifier node)
    {
        inADataModifier(node);
        if(node.getDataModifierDefaultKeyword() != null)
        {
            node.getDataModifierDefaultKeyword().apply(this);
        }
        outADataModifier(node);
    }
}
