/* This file was generated by SableCC (http://www.sablecc.org/). */

package ivar.grammar.analysis;

import ivar.grammar.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAIvarCompilationUnit(AIvarCompilationUnit node);
    void caseAName(AName node);
    void caseANameTail(ANameTail node);
    void caseACompilationUnit(ACompilationUnit node);
    void caseADeclarationImportDeclarations(ADeclarationImportDeclarations node);
    void caseADeclarationsImportDeclarations(ADeclarationsImportDeclarations node);
    void caseASingleImportDeclaration(ASingleImportDeclaration node);
    void caseATypeImportDeclaration(ATypeImportDeclaration node);
    void caseASingleTypeImportDeclaration(ASingleTypeImportDeclaration node);
    void caseATypeImportStarDeclaration(ATypeImportStarDeclaration node);
    void caseAApplicationDeclaration(AApplicationDeclaration node);
    void caseADeclarationScenarioDeclarations(ADeclarationScenarioDeclarations node);
    void caseADeclarationsScenarioDeclarations(ADeclarationsScenarioDeclarations node);
    void caseASimpleScenarioDeclarationScenarioDeclaration(ASimpleScenarioDeclarationScenarioDeclaration node);
    void caseACompleteScenarioDeclarationScenarioDeclaration(ACompleteScenarioDeclarationScenarioDeclaration node);
    void caseACompleteScenarioDeclaration(ACompleteScenarioDeclaration node);
    void caseASimpleScenarioDeclaration(ASimpleScenarioDeclaration node);
    void caseACreateCrudModifier(ACreateCrudModifier node);
    void caseAReadCrudModifier(AReadCrudModifier node);
    void caseAUpdateCrudModifier(AUpdateCrudModifier node);
    void caseADeleteCrudModifier(ADeleteCrudModifier node);
    void caseAElementScenarioElements(AElementScenarioElements node);
    void caseAElementsScenarioElements(AElementsScenarioElements node);
    void caseAScenarioRolesDeclarationScenarioElement(AScenarioRolesDeclarationScenarioElement node);
    void caseASimpleStepScenarioElement(ASimpleStepScenarioElement node);
    void caseACompleteStepScenarioElement(ACompleteStepScenarioElement node);
    void caseASimpleShadowScenarioElement(ASimpleShadowScenarioElement node);
    void caseASimpleShadowStepDeclaration(ASimpleShadowStepDeclaration node);
    void caseASimpleStepDeclaration(ASimpleStepDeclaration node);
    void caseACompleteStepDeclaration(ACompleteStepDeclaration node);
    void caseAIvarStepTypeStepType(AIvarStepTypeStepType node);
    void caseACustomStepTypeStepType(ACustomStepTypeStepType node);
    void caseAAmountIvarStepType(AAmountIvarStepType node);
    void caseABooleanIvarStepType(ABooleanIvarStepType node);
    void caseADateIvarStepType(ADateIvarStepType node);
    void caseADatetimeIvarStepType(ADatetimeIvarStepType node);
    void caseAFileIvarStepType(AFileIvarStepType node);
    void caseAFormatedtextIvarStepType(AFormatedtextIvarStepType node);
    void caseAImageIvarStepType(AImageIvarStepType node);
    void caseAIntegerIvarStepType(AIntegerIvarStepType node);
    void caseAMultitextIvarStepType(AMultitextIvarStepType node);
    void caseANumberIvarStepType(ANumberIvarStepType node);
    void caseAPasswordIvarStepType(APasswordIvarStepType node);
    void caseAPercentileIvarStepType(APercentileIvarStepType node);
    void caseARealIvarStepType(ARealIvarStepType node);
    void caseATextIvarStepType(ATextIvarStepType node);
    void caseATimeIvarStepType(ATimeIvarStepType node);
    void caseACustomStepType(ACustomStepType node);
    void caseANumberedCardinalityCardinality(ANumberedCardinalityCardinality node);
    void caseAStarCardinalityCardinality(AStarCardinalityCardinality node);
    void caseAStarCardinality(AStarCardinality node);
    void caseANumberedCardinality(ANumberedCardinality node);
    void caseARolesDeclaration(ARolesDeclaration node);
    void caseARoleRoleList(ARoleRoleList node);
    void caseARolesRoleList(ARolesRoleList node);
    void caseARole(ARole node);
    void caseAAllowRoleModifier(AAllowRoleModifier node);
    void caseADenyRoleModifier(ADenyRoleModifier node);
    void caseADeclarationDatasetDeclarations(ADeclarationDatasetDeclarations node);
    void caseADeclarationsDatasetDeclarations(ADeclarationsDatasetDeclarations node);
    void caseADatasetDeclaration(ADatasetDeclaration node);
    void caseADataList(ADataList node);
    void caseADataDeclaration(ADataDeclaration node);
    void caseADataModifier(ADataModifier node);

    void caseTIvarComment(TIvarComment node);
    void caseTApplicationKeyword(TApplicationKeyword node);
    void caseTCrudCreateKeyword(TCrudCreateKeyword node);
    void caseTCrudReadKeyword(TCrudReadKeyword node);
    void caseTCrudUpdateKeyword(TCrudUpdateKeyword node);
    void caseTCrudDeleteKeyword(TCrudDeleteKeyword node);
    void caseTDataKeyword(TDataKeyword node);
    void caseTDataModifierDefaultKeyword(TDataModifierDefaultKeyword node);
    void caseTImportKeyword(TImportKeyword node);
    void caseTRolesKeyword(TRolesKeyword node);
    void caseTRoleModifierAllow(TRoleModifierAllow node);
    void caseTRoleModifierDeny(TRoleModifierDeny node);
    void caseTScenarioKeyword(TScenarioKeyword node);
    void caseTLang(TLang node);
    void caseTAmountTypeKeyword(TAmountTypeKeyword node);
    void caseTBooleanTypeKeyword(TBooleanTypeKeyword node);
    void caseTDateTypeKeyword(TDateTypeKeyword node);
    void caseTDatetimeTypeKeyword(TDatetimeTypeKeyword node);
    void caseTFileTypeKeyword(TFileTypeKeyword node);
    void caseTFormatedtextTypeKeyword(TFormatedtextTypeKeyword node);
    void caseTImageTypeKeyword(TImageTypeKeyword node);
    void caseTIntegerTypeKeyword(TIntegerTypeKeyword node);
    void caseTMultitextTypeKeyword(TMultitextTypeKeyword node);
    void caseTNumberTypeKeyword(TNumberTypeKeyword node);
    void caseTPasswordTypeKeyword(TPasswordTypeKeyword node);
    void caseTPercentileTypeKeyword(TPercentileTypeKeyword node);
    void caseTRealTypeKeyword(TRealTypeKeyword node);
    void caseTTextTypeKeyword(TTextTypeKeyword node);
    void caseTTimeTypeKeyword(TTimeTypeKeyword node);
    void caseTIntegerLiteral(TIntegerLiteral node);
    void caseTStringLiteral(TStringLiteral node);
    void caseTIdentifier(TIdentifier node);
    void caseTLBrc(TLBrc node);
    void caseTRBrc(TRBrc node);
    void caseTSemi(TSemi node);
    void caseTDotdot(TDotdot node);
    void caseTDotdotstar(TDotdotstar node);
    void caseTDot(TDot node);
    void caseTStar(TStar node);
    void caseTWhiteSpaces(TWhiteSpaces node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
