/* This file was generated by SableCC (http://www.sablecc.org/). */

package ivar.grammar.lexer;

import java.io.*;
import ivar.grammar.node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private IPushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") final PushbackReader in)
    {
        this.in = new IPushbackReader() {

            private PushbackReader pushbackReader = in;
            
            @Override
            public void unread(int c) throws IOException {
                pushbackReader.unread(c);
            }
            
            @Override
            public int read() throws IOException {
                return pushbackReader.read();
            }
        };
    }
 
    public Lexer(@SuppressWarnings("hiding") IPushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        // int middle = (low + high) / 2;
                        int middle = (low + high) >>> 1;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            @SuppressWarnings("hiding") Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            @SuppressWarnings("hiding") Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            @SuppressWarnings("hiding") Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            @SuppressWarnings("hiding") Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            @SuppressWarnings("hiding") Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            @SuppressWarnings("hiding") Token token = new13(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            @SuppressWarnings("hiding") Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            @SuppressWarnings("hiding") Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            @SuppressWarnings("hiding") Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            @SuppressWarnings("hiding") Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            @SuppressWarnings("hiding") Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            @SuppressWarnings("hiding") Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            @SuppressWarnings("hiding") Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            @SuppressWarnings("hiding") Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            @SuppressWarnings("hiding") Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            @SuppressWarnings("hiding") Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            @SuppressWarnings("hiding") Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            @SuppressWarnings("hiding") Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            @SuppressWarnings("hiding") Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            @SuppressWarnings("hiding") Token token = new27(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            @SuppressWarnings("hiding") Token token = new28(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            @SuppressWarnings("hiding") Token token = new29(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            @SuppressWarnings("hiding") Token token = new30(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            @SuppressWarnings("hiding") Token token = new31(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            @SuppressWarnings("hiding") Token token = new32(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            @SuppressWarnings("hiding") Token token = new33(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            @SuppressWarnings("hiding") Token token = new34(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            @SuppressWarnings("hiding") Token token = new35(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            @SuppressWarnings("hiding") Token token = new36(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            @SuppressWarnings("hiding") Token token = new37(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            @SuppressWarnings("hiding") Token token = new38(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            @SuppressWarnings("hiding") Token token = new39(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            new InvalidToken(this.text.substring(0, 1), start_line + 1, start_pos + 1),
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIvarComment(text, line, pos); }
    Token new1(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TApplicationKeyword(line, pos); }
    Token new2(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCrudCreateKeyword(line, pos); }
    Token new3(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCrudReadKeyword(line, pos); }
    Token new4(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCrudUpdateKeyword(line, pos); }
    Token new5(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCrudDeleteKeyword(line, pos); }
    Token new6(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDataKeyword(line, pos); }
    Token new7(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDataModifierDefaultKeyword(line, pos); }
    Token new8(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TImportKeyword(line, pos); }
    Token new9(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRolesKeyword(line, pos); }
    Token new10(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRoleModifierAllow(line, pos); }
    Token new11(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRoleModifierDeny(line, pos); }
    Token new12(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TScenarioKeyword(line, pos); }
    Token new13(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLang(text, line, pos); }
    Token new14(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAmountTypeKeyword(line, pos); }
    Token new15(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBooleanTypeKeyword(line, pos); }
    Token new16(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDateTypeKeyword(line, pos); }
    Token new17(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDatetimeTypeKeyword(line, pos); }
    Token new18(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFileTypeKeyword(line, pos); }
    Token new19(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFormatedtextTypeKeyword(line, pos); }
    Token new20(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TImageTypeKeyword(line, pos); }
    Token new21(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIntegerTypeKeyword(line, pos); }
    Token new22(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TMultitextTypeKeyword(line, pos); }
    Token new23(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNumberTypeKeyword(line, pos); }
    Token new24(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TPasswordTypeKeyword(line, pos); }
    Token new25(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TPercentileTypeKeyword(line, pos); }
    Token new26(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRealTypeKeyword(line, pos); }
    Token new27(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTextTypeKeyword(line, pos); }
    Token new28(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTimeTypeKeyword(line, pos); }
    Token new29(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIntegerLiteral(text, line, pos); }
    Token new30(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TStringLiteral(text, line, pos); }
    Token new31(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIdentifier(text, line, pos); }
    Token new32(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLBrc(line, pos); }
    Token new33(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRBrc(line, pos); }
    Token new34(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSemi(line, pos); }
    Token new35(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDotdot(line, pos); }
    Token new36(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDotdotstar(line, pos); }
    Token new37(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDot(line, pos); }
    Token new38(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TStar(line, pos); }
    Token new39(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TWhiteSpaces(text, line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {12, 12, 3}, {13, 13, 4}, {32, 32, 5}, {34, 34, 6}, {35, 35, 7}, {36, 36, 8}, {42, 42, 9}, {43, 43, 10}, {45, 45, 11}, {46, 46, 12}, {47, 47, 13}, {48, 48, 14}, {49, 49, 15}, {50, 50, 16}, {51, 51, 17}, {52, 52, 18}, {53, 53, 19}, {54, 54, 20}, {55, 55, 21}, {56, 56, 22}, {57, 57, 23}, {59, 59, 24}, {65, 65, 25}, {66, 66, 26}, {67, 67, 27}, {68, 68, 28}, {69, 69, 27}, {70, 70, 29}, {71, 72, 27}, {73, 73, 30}, {74, 76, 27}, {77, 77, 31}, {78, 78, 32}, {79, 79, 27}, {80, 80, 33}, {81, 81, 27}, {82, 82, 34}, {83, 83, 27}, {84, 84, 35}, {85, 90, 27}, {95, 95, 36}, {97, 97, 37}, {98, 98, 38}, {99, 99, 39}, {100, 100, 40}, {101, 101, 41}, {102, 102, 42}, {103, 103, 43}, {104, 104, 44}, {105, 105, 45}, {106, 106, 46}, {107, 107, 47}, {108, 108, 48}, {109, 109, 49}, {110, 110, 50}, {111, 111, 51}, {112, 112, 52}, {113, 113, 53}, {114, 114, 54}, {115, 115, 55}, {116, 116, 56}, {117, 117, 57}, {118, 118, 58}, {119, 119, 51}, {120, 120, 59}, {121, 121, 51}, {122, 122, 60}, {123, 123, 61}, {125, 125, 62}, {170, 170, 63}, {181, 181, 64}, {186, 186, 65}, {192, 214, 66}, {216, 246, 67}, {248, 501, 68}, {506, 535, 69}, {592, 680, 70}, {688, 696, 71}, {699, 705, 72}, {720, 721, 73}, {736, 740, 74}, {890, 890, 75}, {902, 902, 76}, {904, 906, 77}, {908, 908, 78}, {910, 929, 79}, {931, 974, 80}, {976, 982, 81}, {986, 986, 82}, {988, 988, 83}, {990, 990, 84}, {992, 992, 85}, {994, 1011, 86}, {1025, 1036, 87}, {1038, 1103, 88}, {1105, 1116, 89}, {1118, 1153, 90}, {1168, 1220, 91}, {1223, 1224, 92}, {1227, 1228, 93}, {1232, 1259, 94}, {1262, 1269, 95}, {1272, 1273, 96}, {1329, 1366, 97}, {1369, 1369, 98}, {1377, 1415, 99}, {1488, 1514, 100}, {1520, 1522, 101}, {1569, 1594, 102}, {1600, 1610, 103}, {1649, 1719, 104}, {1722, 1726, 105}, {1728, 1742, 106}, {1744, 1747, 107}, {1749, 1749, 108}, {1765, 1766, 109}, {2309, 2361, 110}, {2365, 2365, 111}, {2392, 2401, 112}, {2437, 2444, 113}, {2447, 2448, 114}, {2451, 2472, 115}, {2474, 2480, 116}, {2482, 2482, 117}, {2486, 2489, 118}, {2524, 2525, 119}, {2527, 2529, 120}, {2544, 2545, 121}, {2565, 2570, 122}, {2575, 2576, 123}, {2579, 2600, 124}, {2602, 2608, 125}, {2610, 2611, 126}, {2613, 2614, 127}, {2616, 2617, 128}, {2649, 2652, 129}, {2654, 2654, 130}, {2674, 2676, 131}, {2693, 2699, 132}, {2701, 2701, 133}, {2703, 2705, 134}, {2707, 2728, 135}, {2730, 2736, 136}, {2738, 2739, 137}, {2741, 2745, 138}, {2749, 2749, 139}, {2784, 2784, 140}, {2821, 2828, 141}, {2831, 2832, 142}, {2835, 2856, 143}, {2858, 2864, 144}, {2866, 2867, 145}, {2870, 2873, 146}, {2877, 2877, 147}, {2908, 2909, 148}, {2911, 2913, 149}, {2949, 2954, 150}, {2958, 2960, 151}, {2962, 2965, 152}, {2969, 2970, 153}, {2972, 2972, 154}, {2974, 2975, 155}, {2979, 2980, 156}, {2984, 2986, 157}, {2990, 2997, 158}, {2999, 3001, 159}, {3077, 3084, 160}, {3086, 3088, 161}, {3090, 3112, 162}, {3114, 3123, 163}, {3125, 3129, 164}, {3168, 3169, 165}, {3205, 3212, 166}, {3214, 3216, 167}, {3218, 3240, 168}, {3242, 3251, 169}, {3253, 3257, 170}, {3294, 3294, 171}, {3296, 3297, 172}, {3333, 3340, 173}, {3342, 3344, 174}, {3346, 3368, 175}, {3370, 3385, 176}, {3424, 3425, 177}, {3585, 3630, 178}, {3632, 3632, 179}, {3634, 3635, 180}, {3648, 3654, 181}, {3713, 3714, 182}, {3716, 3716, 183}, {3719, 3720, 184}, {3722, 3722, 185}, {3725, 3725, 186}, {3732, 3735, 187}, {3737, 3743, 188}, {3745, 3747, 189}, {3749, 3749, 190}, {3751, 3751, 191}, {3754, 3755, 192}, {3757, 3758, 193}, {3760, 3760, 194}, {3762, 3763, 195}, {3773, 3773, 196}, {3776, 3780, 197}, {3782, 3782, 198}, {3804, 3805, 199}, {3904, 3911, 200}, {3913, 3945, 201}, {4256, 4293, 202}, {4304, 4342, 203}, {4352, 4441, 204}, {4447, 4514, 205}, {4520, 4601, 206}, {7680, 7835, 207}, {7840, 7929, 208}, {7936, 7957, 209}, {7960, 7965, 210}, {7968, 8005, 211}, {8008, 8013, 212}, {8016, 8023, 213}, {8025, 8025, 214}, {8027, 8027, 215}, {8029, 8029, 216}, {8031, 8061, 217}, {8064, 8116, 218}, {8118, 8124, 219}, {8126, 8126, 220}, {8130, 8132, 221}, {8134, 8140, 222}, {8144, 8147, 223}, {8150, 8155, 224}, {8160, 8172, 225}, {8178, 8180, 226}, {8182, 8188, 227}, {8319, 8319, 228}, {8450, 8450, 229}, {8455, 8455, 230}, {8458, 8467, 231}, {8469, 8469, 232}, {8472, 8477, 233}, {8484, 8484, 234}, {8486, 8486, 235}, {8488, 8488, 236}, {8490, 8497, 237}, {8499, 8504, 238}, {12293, 12293, 239}, {12337, 12341, 240}, {12353, 12436, 241}, {12443, 12446, 242}, {12449, 12538, 243}, {12540, 12542, 244}, {12549, 12588, 245}, {12593, 12686, 246}, {19968, 40869, 247}, {44032, 55203, 248}, {63744, 64045, 249}, {64256, 64262, 250}, {64275, 64279, 251}, {64287, 64296, 252}, {64298, 64310, 253}, {64312, 64316, 254}, {64318, 64318, 255}, {64320, 64321, 256}, {64323, 64324, 257}, {64326, 64433, 258}, {64467, 64829, 259}, {64848, 64911, 260}, {64914, 64967, 261}, {65008, 65019, 262}, {65136, 65138, 263}, {65140, 65140, 264}, {65142, 65276, 265}, {65313, 65338, 266}, {65345, 65370, 267}, {65382, 65470, 268}, {65474, 65479, 269}, {65482, 65487, 270}, {65490, 65495, 271}, {65498, 65500, 272}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 9, 1}, {10, 10, 273}, {12, 32, -2}, },
            {{9, 32, -2}, },
            {{0, 9, 274}, {11, 12, 274}, {14, 33, 274}, {34, 34, 275}, {35, 91, 274}, {92, 92, 276}, {93, 65535, 274}, },
            {{35, 35, 277}, },
            {{36, 36, 278}, {48, 57, 279}, {65, 90, 280}, {95, 95, 281}, {97, 122, 282}, {170, 170, 283}, {181, 181, 284}, {186, 186, 285}, {192, 214, 286}, {216, 246, 287}, {248, 501, 288}, {506, 535, 289}, {592, 680, 290}, {688, 696, 291}, {699, 705, 292}, {720, 721, 293}, {736, 740, 294}, {890, 890, 295}, {902, 902, 296}, {904, 906, 297}, {908, 908, 298}, {910, 929, 299}, {931, 974, 300}, {976, 982, 301}, {986, 986, 302}, {988, 988, 303}, {990, 990, 304}, {992, 992, 305}, {994, 1011, 306}, {1025, 1036, 307}, {1038, 1103, 308}, {1105, 1116, 309}, {1118, 1153, 310}, {1168, 1220, 311}, {1223, 1224, 312}, {1227, 1228, 313}, {1232, 1259, 314}, {1262, 1269, 315}, {1272, 1273, 316}, {1329, 1366, 317}, {1369, 1369, 318}, {1377, 1415, 319}, {1488, 1514, 320}, {1520, 1522, 321}, {1569, 1594, 322}, {1600, 1610, 323}, {1632, 1641, 324}, {1649, 1719, 325}, {1722, 1726, 326}, {1728, 1742, 327}, {1744, 1747, 328}, {1749, 1749, 329}, {1765, 1766, 330}, {1776, 1785, 331}, {2309, 2361, 332}, {2365, 2365, 333}, {2392, 2401, 334}, {2406, 2415, 335}, {2437, 2444, 336}, {2447, 2448, 337}, {2451, 2472, 338}, {2474, 2480, 339}, {2482, 2482, 340}, {2486, 2489, 341}, {2524, 2525, 342}, {2527, 2529, 343}, {2534, 2543, 344}, {2544, 2545, 345}, {2565, 2570, 346}, {2575, 2576, 347}, {2579, 2600, 348}, {2602, 2608, 349}, {2610, 2611, 350}, {2613, 2614, 351}, {2616, 2617, 352}, {2649, 2652, 353}, {2654, 2654, 354}, {2662, 2671, 355}, {2674, 2676, 356}, {2693, 2699, 357}, {2701, 2701, 358}, {2703, 2705, 359}, {2707, 2728, 360}, {2730, 2736, 361}, {2738, 2739, 362}, {2741, 2745, 363}, {2749, 2749, 364}, {2784, 2784, 365}, {2790, 2799, 366}, {2821, 2828, 367}, {2831, 2832, 368}, {2835, 2856, 369}, {2858, 2864, 370}, {2866, 2867, 371}, {2870, 2873, 372}, {2877, 2877, 373}, {2908, 2909, 374}, {2911, 2913, 375}, {2918, 2927, 376}, {2949, 2954, 377}, {2958, 2960, 378}, {2962, 2965, 379}, {2969, 2970, 380}, {2972, 2972, 381}, {2974, 2975, 382}, {2979, 2980, 383}, {2984, 2986, 384}, {2990, 2997, 385}, {2999, 3001, 386}, {3047, 3055, 387}, {3077, 3084, 388}, {3086, 3088, 389}, {3090, 3112, 390}, {3114, 3123, 391}, {3125, 3129, 392}, {3168, 3169, 393}, {3174, 3183, 394}, {3205, 3212, 395}, {3214, 3216, 396}, {3218, 3240, 397}, {3242, 3251, 398}, {3253, 3257, 399}, {3294, 3294, 400}, {3296, 3297, 401}, {3302, 3311, 402}, {3333, 3340, 403}, {3342, 3344, 404}, {3346, 3368, 405}, {3370, 3385, 406}, {3424, 3425, 407}, {3430, 3439, 408}, {3585, 3630, 409}, {3632, 3632, 410}, {3634, 3635, 411}, {3648, 3654, 412}, {3664, 3673, 413}, {3713, 3714, 414}, {3716, 3716, 415}, {3719, 3720, 416}, {3722, 3722, 417}, {3725, 3725, 418}, {3732, 3735, 419}, {3737, 3743, 420}, {3745, 3747, 421}, {3749, 3749, 422}, {3751, 3751, 423}, {3754, 3755, 424}, {3757, 3758, 425}, {3760, 3760, 426}, {3762, 3763, 427}, {3773, 3773, 428}, {3776, 3780, 429}, {3782, 3782, 430}, {3792, 3801, 431}, {3804, 3805, 432}, {3872, 3881, 433}, {3904, 3911, 434}, {3913, 3945, 435}, {4256, 4293, 436}, {4304, 4342, 437}, {4352, 4441, 438}, {4447, 4514, 439}, {4520, 4601, 440}, {7680, 7835, 441}, {7840, 7929, 442}, {7936, 7957, 443}, {7960, 7965, 444}, {7968, 8005, 445}, {8008, 8013, 446}, {8016, 8023, 447}, {8025, 8025, 448}, {8027, 8027, 449}, {8029, 8029, 450}, {8031, 8061, 451}, {8064, 8116, 452}, {8118, 8124, 453}, {8126, 8126, 454}, {8130, 8132, 455}, {8134, 8140, 456}, {8144, 8147, 457}, {8150, 8155, 458}, {8160, 8172, 459}, {8178, 8180, 460}, {8182, 8188, 461}, {8319, 8319, 462}, {8450, 8450, 463}, {8455, 8455, 464}, {8458, 8467, 465}, {8469, 8469, 466}, {8472, 8477, 467}, {8484, 8484, 468}, {8486, 8486, 469}, {8488, 8488, 470}, {8490, 8497, 471}, {8499, 8504, 472}, {12293, 12293, 473}, {12337, 12341, 474}, {12353, 12436, 475}, {12443, 12446, 476}, {12449, 12538, 477}, {12540, 12542, 478}, {12549, 12588, 479}, {12593, 12686, 480}, {19968, 40869, 481}, {44032, 55203, 482}, {63744, 64045, 483}, {64256, 64262, 484}, {64275, 64279, 485}, {64287, 64296, 486}, {64298, 64310, 487}, {64312, 64316, 488}, {64318, 64318, 489}, {64320, 64321, 490}, {64323, 64324, 491}, {64326, 64433, 492}, {64467, 64829, 493}, {64848, 64911, 494}, {64914, 64967, 495}, {65008, 65019, 496}, {65136, 65138, 497}, {65140, 65140, 498}, {65142, 65276, 499}, {65296, 65305, 500}, {65313, 65338, 501}, {65345, 65370, 502}, {65382, 65470, 503}, {65474, 65479, 504}, {65482, 65487, 505}, {65490, 65495, 506}, {65498, 65500, 507}, },
            {},
            {},
            {},
            {{46, 46, 508}, },
            {{47, 47, 509}, },
            {},
            {{48, 48, 510}, {49, 49, 511}, {50, 50, 512}, {51, 51, 513}, {52, 52, 514}, {53, 53, 515}, {54, 54, 516}, {55, 55, 517}, {56, 56, 518}, {57, 57, 519}, {95, 95, 520}, },
            {{48, 95, -17}, },
            {{48, 95, -17}, },
            {{48, 95, -17}, },
            {{48, 95, -17}, },
            {{48, 95, -17}, },
            {{48, 95, -17}, },
            {{48, 95, -17}, },
            {{48, 95, -17}, },
            {},
            {{36, 95, -10}, {97, 108, 282}, {109, 109, 521}, {110, 122, 282}, {170, 65500, -10}, },
            {{36, 95, -10}, {97, 110, 282}, {111, 111, 522}, {112, 122, 282}, {170, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 95, -10}, {97, 97, 523}, {98, 122, 282}, {170, 65500, -10}, },
            {{36, 95, -10}, {97, 104, 282}, {105, 105, 524}, {106, 110, 282}, {111, 111, 525}, {112, 65500, -28}, },
            {{36, 108, -27}, {109, 109, 526}, {110, 110, 527}, {111, 122, 282}, {170, 65500, -10}, },
            {{36, 95, -10}, {97, 116, 282}, {117, 117, 528}, {118, 122, 282}, {170, 65500, -10}, },
            {{36, 116, -33}, {117, 117, 529}, {118, 65500, -33}, },
            {{36, 95, -10}, {97, 97, 530}, {98, 100, 282}, {101, 101, 531}, {102, 122, 282}, {170, 65500, -10}, },
            {{36, 95, -10}, {97, 100, 282}, {101, 101, 532}, {102, 65500, -35}, },
            {{36, 100, -36}, {101, 101, 533}, {102, 104, 282}, {105, 105, 534}, {106, 122, 282}, {170, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 95, -10}, {97, 101, 282}, {102, 102, 535}, {103, 111, 282}, {112, 112, 536}, {113, 113, 282}, {114, 114, 537}, {115, 121, 282}, {122, 122, 538}, {170, 65500, -10}, },
            {{36, 100, -36}, {101, 101, 539}, {102, 102, 282}, {103, 103, 540}, {104, 114, 282}, {115, 115, 541}, {116, 122, 282}, {170, 65500, -10}, },
            {{36, 95, -10}, {97, 97, 542}, {98, 113, 282}, {114, 114, 543}, {115, 115, 544}, {116, 120, 282}, {121, 121, 545}, {122, 122, 282}, {170, 65500, -10}, },
            {{36, 95, -10}, {97, 97, 546}, {98, 100, 282}, {101, 101, 547}, {102, 117, 282}, {118, 118, 548}, {119, 122, 282}, {170, 65500, -10}, },
            {{36, 95, -10}, {97, 107, 282}, {108, 108, 549}, {109, 109, 282}, {110, 110, 550}, {111, 111, 551}, {112, 114, 282}, {115, 115, 552}, {116, 116, 553}, {117, 117, 554}, {118, 65500, -33}, },
            {{36, 95, -10}, {97, 97, 555}, {98, 104, 282}, {105, 105, 556}, {106, 110, 282}, {111, 111, 557}, {112, 113, 282}, {114, 114, 558}, {115, 122, 282}, {170, 65500, -10}, },
            {{36, 107, -43}, {108, 108, 559}, {109, 116, 282}, {117, 117, 560}, {118, 65500, -33}, },
            {{36, 100, -36}, {101, 101, 561}, {102, 104, 282}, {105, 105, 562}, {106, 113, 282}, {114, 114, 563}, {115, 116, 282}, {117, 117, 564}, {118, 120, 282}, {121, 121, 565}, {122, 65500, -41}, },
            {{36, 95, -10}, {97, 99, 282}, {100, 100, 566}, {101, 108, 282}, {109, 109, 567}, {110, 114, 282}, {115, 115, 568}, {116, 116, 569}, {117, 122, 282}, {170, 65500, -10}, },
            {{36, 95, -10}, {97, 97, 570}, {98, 65500, -30}, },
            {{36, 95, -10}, {97, 97, 571}, {98, 106, 282}, {107, 107, 572}, {108, 109, 282}, {110, 110, 573}, {111, 111, 574}, {112, 120, 282}, {121, 121, 575}, {122, 65500, -41}, },
            {{36, 95, -10}, {97, 115, 282}, {116, 116, 576}, {117, 117, 282}, {118, 118, 577}, {119, 65500, -42}, },
            {{36, 104, -31}, {105, 105, 578}, {106, 106, 282}, {107, 107, 579}, {108, 109, 282}, {110, 110, 580}, {111, 113, 282}, {114, 114, 581}, {115, 115, 582}, {116, 116, 583}, {117, 65500, -47}, },
            {{36, 95, -10}, {97, 97, 282}, {98, 98, 584}, {99, 107, 282}, {108, 108, 585}, {109, 109, 282}, {110, 110, 586}, {111, 114, 282}, {115, 115, 587}, {116, 65500, -40}, },
            {{36, 65500, -10}, },
            {{36, 95, -10}, {97, 97, 588}, {98, 107, 282}, {108, 108, 589}, {109, 114, 282}, {115, 115, 590}, {116, 116, 591}, {117, 65500, -47}, },
            {{36, 116, -33}, {117, 117, 592}, {118, 65500, -33}, },
            {{36, 100, -36}, {101, 101, 593}, {102, 110, 282}, {111, 111, 594}, {112, 116, 282}, {117, 117, 595}, {118, 65500, -33}, },
            {{36, 95, -10}, {97, 97, 596}, {98, 98, 282}, {99, 99, 597}, {100, 100, 282}, {101, 101, 598}, {102, 106, 282}, {107, 107, 599}, {108, 108, 600}, {109, 112, 282}, {113, 113, 601}, {114, 114, 602}, {115, 117, 282}, {118, 118, 603}, {119, 119, 604}, {120, 120, 282}, {121, 121, 605}, {122, 65500, -41}, },
            {{36, 95, -10}, {97, 97, 606}, {98, 100, 282}, {101, 101, 607}, {102, 103, 282}, {104, 104, 608}, {105, 107, 282}, {108, 108, 609}, {109, 109, 282}, {110, 110, 610}, {111, 113, 282}, {114, 114, 611}, {115, 115, 612}, {116, 116, 613}, {117, 65500, -47}, },
            {{36, 95, -10}, {97, 106, 282}, {107, 107, 614}, {108, 111, 282}, {112, 112, 615}, {113, 113, 282}, {114, 114, 616}, {115, 121, 282}, {122, 122, 617}, {170, 65500, -10}, },
            {{36, 104, -31}, {105, 105, 618}, {106, 65500, -37}, },
            {{36, 95, -10}, {97, 103, 282}, {104, 104, 619}, {105, 122, 282}, {170, 65500, -10}, },
            {{36, 103, -61}, {104, 104, 620}, {105, 116, 282}, {117, 117, 621}, {118, 65500, -33}, },
            {},
            {},
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{9, 32, -2}, },
            {{0, 65535, -8}, },
            {},
            {{34, 34, 622}, {39, 39, 623}, {92, 92, 624}, {98, 98, 625}, {102, 102, 626}, {110, 110, 627}, {114, 114, 628}, {116, 116, 629}, },
            {{0, 9, 630}, {10, 10, 631}, {11, 12, 630}, {13, 13, 632}, {14, 65535, 630}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{42, 42, 633}, },
            {{0, 9, 634}, {10, 10, 635}, {11, 12, 634}, {13, 13, 636}, {14, 65535, 634}, },
            {{48, 48, 637}, {49, 49, 638}, {50, 50, 639}, {51, 51, 640}, {52, 52, 641}, {53, 53, 642}, {54, 54, 643}, {55, 55, 644}, {56, 56, 645}, {57, 57, 646}, {95, 95, 647}, },
            {{48, 95, -512}, },
            {{48, 95, -512}, },
            {{48, 95, -512}, },
            {{48, 95, -512}, },
            {{48, 95, -512}, },
            {{48, 95, -512}, },
            {{48, 95, -512}, },
            {{48, 95, -512}, },
            {{48, 95, -512}, },
            {{48, 48, 648}, {49, 49, 649}, {50, 50, 650}, {51, 51, 651}, {52, 52, 652}, {53, 53, 653}, {54, 54, 654}, {55, 55, 655}, {56, 56, 656}, {57, 57, 657}, {95, 95, 520}, },
            {{36, 110, -28}, {111, 111, 658}, {112, 65500, -28}, },
            {{36, 110, -28}, {111, 111, 659}, {112, 65500, -28}, },
            {{36, 115, -50}, {116, 116, 660}, {117, 65500, -47}, },
            {{36, 107, -43}, {108, 108, 661}, {109, 122, 282}, {170, 65500, -10}, },
            {{36, 95, -10}, {97, 113, 282}, {114, 114, 662}, {115, 65500, -44}, },
            {{36, 95, -10}, {97, 97, 663}, {98, 65500, -30}, },
            {{36, 115, -50}, {116, 116, 664}, {117, 65500, -47}, },
            {{36, 107, -43}, {108, 108, 665}, {109, 65500, -526}, },
            {{36, 108, -27}, {109, 109, 666}, {110, 65500, -27}, },
            {{36, 95, -10}, {97, 114, 282}, {115, 115, 667}, {116, 65500, -40}, },
            {{36, 113, -527}, {114, 114, 668}, {115, 65500, -44}, },
            {{36, 95, -10}, {97, 97, 669}, {98, 65500, -30}, },
            {{36, 95, -10}, {97, 119, 282}, {120, 120, 670}, {121, 122, 282}, {170, 65500, -10}, },
            {{36, 108, -27}, {109, 109, 671}, {110, 65500, -27}, },
            {{36, 36, 278}, {45, 45, 672}, {48, 65500, -10}, },
            {{36, 95, -10}, {97, 111, 282}, {112, 112, 673}, {113, 122, 282}, {170, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 674}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 675}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 676}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 677}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 678}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 679}, {48, 65500, -10}, },
            {{36, 100, -36}, {101, 101, 680}, {102, 65500, -35}, },
            {{36, 36, 278}, {45, 45, 681}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 682}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 683}, {48, 115, -50}, {116, 116, 684}, {117, 65500, -47}, },
            {{36, 36, 278}, {45, 45, 685}, {48, 107, -43}, {108, 108, 686}, {109, 65500, -526}, },
            {{36, 36, 278}, {45, 45, 687}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 688}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 689}, {48, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 690}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 691}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 692}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 693}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 694}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 695}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 696}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 697}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 698}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 699}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 700}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 701}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 702}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 703}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 704}, {48, 65500, -10}, },
            {{36, 111, -538}, {112, 112, 705}, {113, 65500, -538}, },
            {{36, 36, 278}, {45, 45, 706}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 707}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 708}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 709}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 710}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 711}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 712}, {48, 106, -59}, {107, 107, 713}, {108, 122, 282}, {170, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 714}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 715}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 716}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 717}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 718}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 719}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 720}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 721}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 722}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 723}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 724}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 725}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 726}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 727}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 728}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 729}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 730}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 731}, {48, 65500, -10}, },
            {{36, 95, -10}, {97, 97, 732}, {98, 65500, -30}, },
            {{36, 36, 278}, {45, 45, 733}, {48, 107, -43}, {108, 108, 734}, {109, 65500, -526}, },
            {{36, 36, 278}, {45, 45, 735}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 736}, {48, 65500, -10}, },
            {{36, 100, -36}, {101, 101, 737}, {102, 65500, -35}, },
            {{36, 36, 278}, {45, 45, 738}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 739}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 740}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 741}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 742}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 743}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 744}, {48, 65500, -10}, },
            {{36, 113, -527}, {114, 114, 745}, {115, 65500, -44}, },
            {{36, 36, 278}, {45, 45, 746}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 747}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 748}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 749}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 750}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 751}, {48, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 752}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 753}, {48, 65500, -10}, },
            {{36, 99, -47}, {100, 100, 754}, {101, 122, 282}, {170, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 755}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 756}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 757}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 758}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 759}, {48, 65500, -10}, },
            {{36, 36, 278}, {45, 45, 760}, {48, 65500, -10}, },
            {{0, 65535, -8}, },
            {{0, 65535, -8}, },
            {{0, 65535, -8}, },
            {{0, 65535, -8}, },
            {{0, 65535, -8}, },
            {{0, 65535, -8}, },
            {{0, 65535, -8}, },
            {{0, 65535, -8}, },
            {{0, 65535, -279}, },
            {},
            {{10, 10, 761}, },
            {},
            {{0, 65535, -511}, },
            {},
            {{10, 10, 762}, },
            {{48, 95, -512}, },
            {{48, 95, -512}, },
            {{48, 95, -512}, },
            {{48, 95, -512}, },
            {{48, 95, -512}, },
            {{48, 95, -512}, },
            {{48, 95, -512}, },
            {{48, 95, -512}, },
            {{48, 95, -512}, },
            {{48, 95, -512}, },
            {{48, 95, -512}, },
            {{48, 48, 763}, {49, 49, 764}, {50, 50, 765}, {51, 51, 766}, {52, 52, 767}, {53, 53, 768}, {54, 54, 769}, {55, 55, 770}, {56, 56, 771}, {57, 57, 772}, {95, 95, 773}, },
            {{48, 95, -650}, },
            {{48, 95, -650}, },
            {{48, 95, -650}, },
            {{48, 95, -650}, },
            {{48, 95, -650}, },
            {{48, 95, -650}, },
            {{48, 95, -650}, },
            {{48, 95, -650}, },
            {{48, 95, -650}, },
            {{36, 116, -33}, {117, 117, 774}, {118, 65500, -33}, },
            {{36, 107, -43}, {108, 108, 775}, {109, 65500, -526}, },
            {{36, 100, -36}, {101, 101, 776}, {102, 65500, -35}, },
            {{36, 100, -36}, {101, 101, 777}, {102, 65500, -35}, },
            {{36, 108, -27}, {109, 109, 778}, {110, 65500, -27}, },
            {{36, 95, -10}, {97, 102, 282}, {103, 103, 779}, {104, 122, 282}, {170, 65500, -10}, },
            {{36, 100, -36}, {101, 101, 780}, {102, 65500, -35}, },
            {{36, 115, -50}, {116, 116, 781}, {117, 65500, -47}, },
            {{36, 97, -52}, {98, 98, 782}, {99, 122, 282}, {170, 65500, -10}, },
            {{36, 114, -532}, {115, 115, 783}, {116, 65500, -40}, },
            {{36, 95, -10}, {97, 98, 282}, {99, 99, 784}, {100, 122, 282}, {170, 65500, -10}, },
            {{36, 107, -43}, {108, 108, 785}, {109, 65500, -526}, },
            {{36, 115, -50}, {116, 116, 786}, {117, 65500, -47}, },
            {{36, 100, -36}, {101, 101, 787}, {102, 65500, -35}, },
            {{122, 122, 788}, },
            {{36, 107, -43}, {108, 108, 789}, {109, 65500, -526}, },
            {{97, 97, 790}, {98, 98, 791}, {100, 100, 792}, {101, 101, 793}, {105, 105, 794}, {106, 106, 795}, {107, 107, 796}, {108, 108, 797}, {109, 109, 798}, {111, 111, 799}, {113, 113, 800}, {115, 115, 801}, {116, 116, 802}, {121, 121, 803}, },
            {{97, 97, 804}, },
            {{98, 98, 805}, },
            {{98, 98, 806}, },
            {{98, 98, 807}, },
            {{101, 101, 808}, },
            {{36, 95, -10}, {97, 97, 809}, {98, 65500, -30}, },
            {{99, 99, 810}, },
            {{103, 103, 811}, },
            {{100, 100, 812}, },
            {{36, 95, -10}, {97, 97, 813}, {98, 65500, -30}, },
            {{97, 97, 814}, {99, 99, 815}, {100, 100, 816}, {108, 108, 817}, },
            {{36, 100, -36}, {101, 101, 818}, {102, 65500, -35}, },
            {{109, 109, 819}, },
            {{103, 103, 820}, },
            {{97, 97, 821}, {98, 98, 822}, {99, 99, 823}, {103, 103, 824}, {105, 105, 825}, {106, 106, 826}, {110, 110, 827}, {112, 112, 828}, {116, 116, 829}, {117, 117, 830}, {122, 122, 831}, },
            {{97, 97, 832}, {98, 98, 833}, {99, 99, 834}, {100, 100, 835}, {101, 101, 836}, {103, 103, 837}, {104, 104, 838}, {109, 109, 839}, {110, 110, 840}, {112, 112, 841}, {115, 115, 842}, {117, 117, 843}, {118, 118, 844}, },
            {{101, 101, 845}, },
            {{101, 101, 846}, },
            {{105, 105, 847}, },
            {{102, 102, 848}, },
            {{102, 102, 849}, },
            {{98, 98, 850}, {99, 99, 851}, {102, 102, 852}, {108, 108, 853}, {109, 109, 854}, },
            {{101, 101, 855}, },
            {{105, 105, 856}, },
            {{105, 105, 857}, },
            {{105, 105, 858}, },
            {{98, 98, 859}, {104, 104, 860}, },
            {{104, 104, 861}, },
            {{97, 97, 862}, },
            {{105, 105, 863}, },
            {{36, 110, -28}, {111, 111, 864}, {112, 65500, -28}, },
            {{105, 105, 865}, },
            {{99, 99, 866}, {105, 105, 867}, },
            {{106, 106, 868}, },
            {{103, 103, 869}, },
            {{107, 107, 870}, },
            {{105, 105, 871}, },
            {{107, 107, 872}, },
            {{36, 36, 278}, {45, 45, 873}, {48, 65500, -10}, },
            {{107, 107, 874}, },
            {{108, 108, 875}, },
            {{108, 108, 876}, },
            {{110, 110, 877}, },
            {{109, 109, 878}, },
            {{109, 109, 879}, },
            {{105, 105, 880}, },
            {{98, 98, 881}, {109, 109, 882}, },
            {{109, 109, 883}, },
            {{110, 110, 884}, },
            {{98, 98, 885}, {110, 110, 886}, },
            {{110, 110, 887}, },
            {{122, 122, 888}, },
            {{105, 105, 889}, },
            {{112, 112, 890}, },
            {{97, 97, 891}, },
            {{98, 98, 892}, {112, 112, 893}, },
            {{98, 98, 894}, {101, 101, 895}, {112, 112, 896}, },
            {{36, 99, -47}, {100, 100, 897}, {101, 65500, -617}, },
            {{114, 114, 898}, },
            {{36, 100, -36}, {101, 101, 899}, {102, 65500, -35}, },
            {{114, 114, 900}, },
            {{105, 105, 901}, },
            {{36, 95, -10}, {97, 109, 282}, {110, 110, 902}, {111, 65500, -32}, },
            {{102, 102, 903}, {110, 110, 904}, {115, 115, 905}, },
            {{115, 115, 906}, },
            {{115, 115, 907}, },
            {{97, 97, 908}, },
            {{98, 98, 909}, {115, 115, 910}, },
            {{102, 102, 911}, {115, 115, 912}, },
            {{107, 107, 913}, },
            {{36, 36, 278}, {45, 45, 914}, {48, 65500, -10}, },
            {{105, 105, 915}, },
            {{105, 105, 916}, },
            {{116, 116, 917}, },
            {{112, 112, 918}, },
            {{122, 122, 919}, },
            {{116, 116, 920}, },
            {{114, 114, 921}, },
            {{117, 117, 922}, },
            {{36, 95, -10}, {97, 97, 923}, {98, 65500, -30}, },
            {{112, 112, 924}, },
            {{117, 117, 925}, },
            {{118, 118, 926}, },
            {{122, 122, 927}, },
            {{99, 99, 928}, {104, 104, 929}, {109, 109, 930}, {115, 115, 931}, {116, 116, 932}, },
            {{122, 122, 933}, },
            {},
            {},
            {{48, 95, -650}, },
            {{48, 95, -650}, },
            {{48, 95, -650}, },
            {{48, 95, -650}, },
            {{48, 95, -650}, },
            {{48, 95, -650}, },
            {{48, 95, -650}, },
            {{48, 95, -650}, },
            {{48, 95, -650}, },
            {{48, 95, -650}, },
            {{48, 95, -650}, },
            {{36, 109, -739}, {110, 110, 934}, {111, 65500, -32}, },
            {{36, 100, -36}, {101, 101, 935}, {102, 65500, -35}, },
            {{36, 57, -10}, {65, 83, 280}, {84, 84, 936}, {85, 90, 280}, {95, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 95, -10}, {97, 97, 937}, {98, 65500, -30}, },
            {{36, 100, -36}, {101, 101, 938}, {102, 65500, -35}, },
            {{36, 102, -665}, {103, 103, 939}, {104, 65500, -665}, },
            {{36, 104, -31}, {105, 105, 940}, {106, 65500, -37}, },
            {{36, 100, -36}, {101, 101, 941}, {102, 65500, -35}, },
            {{36, 95, -10}, {97, 118, 282}, {119, 119, 942}, {120, 122, 282}, {170, 65500, -10}, },
            {{36, 100, -36}, {101, 101, 943}, {102, 65500, -35}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{97, 97, 944}, },
            {{36, 104, -31}, {105, 105, 945}, {106, 65500, -37}, },
            {{101, 101, 946}, },
            {{104, 104, 947}, },
            {{122, 122, 948}, },
            {{103, 103, 949}, },
            {{113, 113, 950}, },
            {{111, 111, 951}, },
            {{119, 119, 952}, },
            {{98, 98, 953}, {121, 121, 954}, },
            {{97, 97, 955}, },
            {{109, 109, 956}, },
            {{97, 97, 957}, },
            {{97, 97, 958}, {121, 121, 959}, },
            {{110, 110, 960}, },
            {{101, 101, 961}, },
            {{122, 122, 962}, },
            {{121, 121, 963}, },
            {{103, 103, 964}, },
            {{97, 97, 965}, },
            {{115, 115, 966}, },
            {{36, 115, -50}, {116, 116, 967}, {117, 65500, -47}, },
            {{122, 122, 968}, },
            {{98, 98, 969}, },
            {{107, 107, 970}, },
            {{36, 65500, -10}, },
            {{116, 116, 971}, },
            {{104, 104, 972}, },
            {{101, 101, 973}, },
            {{105, 105, 974}, {117, 117, 975}, },
            {{36, 115, -50}, {116, 116, 976}, {117, 65500, -47}, },
            {{118, 118, 977}, },
            {{114, 114, 978}, },
            {{117, 117, 979}, },
            {{122, 122, 980}, },
            {{97, 97, 981}, {98, 98, 982}, },
            {{98, 98, 983}, },
            {{101, 101, 984}, },
            {{109, 109, 985}, },
            {{122, 122, 986}, },
            {{104, 104, 987}, },
            {{116, 116, 988}, },
            {{115, 115, 989}, },
            {{97, 97, 990}, {119, 119, 991}, },
            {{114, 114, 992}, },
            {{111, 111, 993}, },
            {{108, 108, 994}, {111, 111, 995}, {114, 114, 996}, },
            {{111, 111, 997}, },
            {{99, 99, 998}, {115, 115, 999}, },
            {{116, 116, 1000}, },
            {{110, 110, 1001}, },
            {{120, 120, 1002}, },
            {{105, 105, 1003}, },
            {{97, 97, 1004}, {101, 101, 1005}, {114, 114, 1006}, {121, 121, 1007}, },
            {{118, 118, 1008}, },
            {{121, 121, 1009}, },
            {{101, 101, 1010}, },
            {{101, 101, 1011}, },
            {{115, 115, 1012}, },
            {{114, 114, 1013}, },
            {{105, 105, 1014}, },
            {{111, 111, 1015}, },
            {{101, 101, 1016}, },
            {{97, 97, 1017}, {104, 104, 1018}, },
            {{114, 114, 1019}, },
            {{117, 117, 1020}, },
            {{99, 99, 1021}, },
            {{115, 115, 1022}, },
            {{110, 110, 1023}, },
            {{108, 108, 1024}, },
            {{110, 110, 1025}, },
            {{97, 97, 1026}, },
            {{114, 114, 1027}, },
            {{117, 117, 1028}, },
            {{109, 109, 1029}, },
            {{100, 100, 1030}, },
            {{36, 113, -527}, {114, 114, 1031}, {115, 65500, -44}, },
            {{115, 115, 1032}, },
            {{104, 104, 1033}, },
            {{116, 116, 1034}, },
            {{112, 112, 1035}, },
            {{101, 101, 1036}, },
            {{122, 122, 1037}, },
            {{110, 110, 1038}, },
            {{114, 114, 1039}, },
            {{105, 105, 1040}, },
            {{103, 103, 1041}, },
            {{116, 116, 1042}, },
            {{118, 118, 1043}, },
            {{122, 122, 1044}, },
            {{107, 107, 1045}, },
            {{110, 110, 1046}, },
            {{110, 110, 1047}, },
            {{110, 110, 1048}, },
            {{121, 121, 1049}, },
            {{116, 116, 1050}, },
            {{111, 111, 1051}, },
            {{101, 101, 1052}, },
            {{108, 108, 1053}, },
            {{111, 111, 1054}, },
            {{97, 97, 1055}, },
            {{110, 110, 1056}, },
            {{108, 108, 1057}, },
            {{114, 114, 1058}, },
            {{114, 114, 1059}, },
            {{116, 116, 1060}, },
            {{111, 111, 1061}, },
            {{99, 99, 1062}, },
            {{101, 101, 1063}, },
            {{36, 65500, -10}, },
            {{111, 111, 1064}, },
            {{36, 114, -532}, {115, 115, 1065}, {116, 65500, -40}, },
            {{117, 117, 1066}, },
            {{110, 110, 1067}, },
            {{36, 95, -10}, {97, 97, 1068}, {98, 65500, -30}, },
            {{105, 105, 1069}, },
            {{111, 111, 1070}, },
            {{101, 101, 1071}, },
            {{107, 107, 1072}, },
            {{105, 105, 1073}, },
            {{108, 108, 1074}, },
            {{97, 97, 1075}, },
            {{112, 112, 1076}, },
            {{105, 105, 1077}, },
            {{101, 101, 1078}, },
            {{101, 101, 1079}, },
            {{115, 115, 1080}, },
            {{110, 110, 1081}, },
            {{110, 110, 1082}, },
            {{104, 104, 1083}, },
            {{104, 104, 1084}, },
            {{97, 97, 1085}, },
            {{114, 114, 1086}, },
            {{117, 117, 1087}, },
            {{97, 97, 1088}, },
            {{36, 115, -50}, {116, 116, 1089}, {117, 65500, -47}, },
            {{107, 107, 1090}, },
            {{122, 122, 1091}, },
            {{110, 110, 1092}, },
            {{97, 97, 1093}, },
            {{110, 110, 1094}, },
            {{107, 107, 1095}, },
            {{111, 111, 1096}, },
            {{103, 103, 1097}, },
            {{119, 119, 1098}, },
            {{97, 97, 1099}, },
            {{36, 115, -50}, {116, 116, 1100}, {117, 65500, -47}, },
            {{36, 95, -10}, {97, 97, 1101}, {98, 65500, -30}, },
            {{36, 104, -31}, {105, 105, 1102}, {106, 65500, -37}, },
            {{36, 115, -50}, {116, 116, 1103}, {117, 65500, -47}, },
            {{36, 65500, -10}, },
            {{36, 100, -36}, {101, 101, 1104}, {102, 65500, -35}, },
            {{36, 115, -50}, {116, 116, 1105}, {117, 65500, -47}, },
            {{36, 113, -527}, {114, 114, 1106}, {115, 65500, -44}, },
            {{36, 110, -28}, {111, 111, 1107}, {112, 65500, -28}, },
            {{36, 109, -739}, {110, 110, 1108}, {111, 65500, -32}, },
            {},
            {{36, 98, -670}, {99, 99, 1109}, {100, 65500, -670}, },
            {},
            {},
            {},
            {},
            {},
            {{97, 97, 1110}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {{36, 100, -36}, {101, 101, 1111}, {102, 65500, -35}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {{36, 100, -36}, {101, 101, 1112}, {102, 65500, -35}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {{36, 115, -50}, {116, 116, 1113}, {117, 65500, -47}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {{110, 110, 1114}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {{36, 65500, -10}, },
            {},
            {},
            {{36, 113, -527}, {114, 114, 1115}, {115, 65500, -44}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {{121, 121, 1116}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {{36, 100, -36}, {101, 101, 1117}, {102, 65500, -35}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {{36, 65500, -10}, },
            {{36, 109, -739}, {110, 110, 1118}, {111, 65500, -32}, },
            {{36, 108, -27}, {109, 109, 1119}, {110, 65500, -27}, },
            {{36, 100, -36}, {101, 101, 1120}, {102, 65500, -35}, },
            {{36, 113, -527}, {114, 114, 1121}, {115, 65500, -44}, },
            {{36, 100, -36}, {101, 101, 1122}, {102, 65500, -35}, },
            {{36, 65500, -10}, },
            {{36, 113, -527}, {114, 114, 1123}, {115, 65500, -44}, },
            {{36, 115, -50}, {116, 116, 1124}, {117, 65500, -47}, },
            {{36, 95, -10}, {97, 97, 1125}, {98, 65500, -30}, },
            {{102, 102, 1126}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {},
            {{36, 104, -31}, {105, 105, 1127}, {106, 65500, -37}, },
            {},
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
            {{36, 100, -36}, {101, 101, 1128}, {102, 65500, -35}, },
            {{36, 99, -47}, {100, 100, 1129}, {101, 65500, -617}, },
            {{36, 65500, -10}, },
            {{36, 119, -535}, {120, 120, 1130}, {121, 65500, -535}, },
            {{36, 99, -47}, {100, 100, 1131}, {101, 65500, -617}, },
            {{36, 104, -31}, {105, 105, 1132}, {106, 65500, -37}, },
            {{36, 115, -50}, {116, 116, 1133}, {117, 65500, -47}, },
            {},
            {{36, 110, -28}, {111, 111, 1134}, {112, 65500, -28}, },
            {{36, 65500, -10}, },
            {{36, 115, -50}, {116, 116, 1135}, {117, 65500, -47}, },
            {{36, 115, -50}, {116, 116, 1136}, {117, 65500, -47}, },
            {{36, 65500, -10}, },
            {{36, 107, -43}, {108, 108, 1137}, {109, 65500, -526}, },
            {{36, 104, -31}, {105, 105, 1138}, {106, 65500, -37}, },
            {{36, 65500, -10}, },
            {{36, 100, -36}, {101, 101, 1139}, {102, 65500, -35}, },
            {{36, 65500, -10}, },
            {{36, 100, -36}, {101, 101, 1140}, {102, 65500, -35}, },
            {{36, 110, -28}, {111, 111, 1141}, {112, 65500, -28}, },
            {{36, 119, -535}, {120, 120, 1142}, {121, 65500, -535}, },
            {{36, 65500, -10}, },
            {{36, 109, -739}, {110, 110, 1143}, {111, 65500, -32}, },
            {{36, 115, -50}, {116, 116, 1144}, {117, 65500, -47}, },
            {{36, 65500, -10}, },
            {{36, 65500, -10}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 39, 39, 39, 39, 39, -1, -1, 31, 7, 10, 11, 37, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 34, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 33, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 39, -1, 30, -1, 0, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 35, 0, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, -1, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 13, 31, 13, 13, 13, 13, 31, 13, 31, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 31, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 31, 13, 13, 13, 13, 13, 13, 31, 13, 13, 13, 31, 13, 13, 13, 13, 31, 13, 13, 31, 13, 13, 13, 13, 13, 13, 13, 13, 13, 31, 13, 13, 13, 13, 13, 13, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 36, 0, 0, 0, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, -1, 31, -1, -1, -1, -1, -1, -1, 31, -1, -1, -1, 31, -1, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, -1, 31, -1, -1, 31, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, 31, -1, -1, -1, -1, -1, -1, 0, 0, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, -1, 31, 31, 16, 18, 31, 31, 31, 31, 31, 31, 31, 26, 27, 28, -1, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, -1, -1, -1, 6, -1, -1, -1, -1, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 31, -1, -1, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, 31, 31, 31, 20, 31, 31, 31, 31, 31, 13, 31, 13, 13, 13, 13, 13, -1, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 31, 13, 13, 13, 13, 13, 13, 13, 13, 31, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 31, 13, 13, 13, 13, 13, 13, 13, 13, -1, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 9, 13, 13, 31, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, -1, 13, 13, 13, 13, 13, 13, 13, 13, 31, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 31, 31, 31, 31, 31, 23, 31, 31, 31, -1, 2, 5, 8, 13, 31, 13, 4, 15, 31, 31, 21, 31, 31, 31, 31, 13, 31, 17, 31, 31, 24, 31, 31, 12, 31, 22, 31, 31, 31, 25, 31, 31, 1, 19, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
