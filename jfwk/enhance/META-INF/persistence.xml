<?xml version="1.0" encoding="UTF-8"?>
<persistence xmlns="http://java.sun.com/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0">

    <persistence-unit name="openjpa-enhance-jfwk" transaction-type="RESOURCE_LOCAL">
        <provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>

        <class>dolab.fwk.files.persistence.ApplicationFileIndex</class>
        <class>dolab.fwk.files.persistence.AbstractFileIndex</class>
        <properties>
            <!--Manage reverse relation automatically by OpenJPA -->
            <!--<property name="openjpa.InverseManager" value="true" />-->
            <!--Enable log for reverse relation -->
            <property name="openjpa.InverseManager" value="true(Action=warn)"/>

            <!--Ensure that all null value depends on fetch group, outside fetch group,
            null are not set. -->
            <property name="openjpa.DetachState" value="fetch-groups"/>

            <!--Ensure that enhancement is only at build-time by disabling enhance
            at run-time -->
            <property name="openjpa.DynamicEnhancementAgent" value="false"/>
            <property name="openjpa.RuntimeUnenhancedClasses" value="unsupported"/>

            <!--ttp://en.wikipedia.org/wiki/Foreign_key#RESTRICT), this simply means that you should not be able to delete an entity when there is still a foreign key reference to it. The way to enforce this is by using foreign key constraints, so when you use this option, OpenJPA will generate them.-->
            <property name="openjpa.jdbc.MappingDefaults"
                      value="ForeignKeyDeleteAction=restrict, JoinForeignKeyDeleteAction=restrict"/>

            <!--Have a look here for all config possibility -->
            <!--http://commons.apache.org/dbcp/configuration.html -->

            <property name="openjpa.Log" value="DefaultLevel=WARN, Tool=INFO, Schema=TRACE"/>
        </properties>
    </persistence-unit>
</persistence>