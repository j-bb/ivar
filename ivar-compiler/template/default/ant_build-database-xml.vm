##
##   Copyright (c) 2004-2020, Jean-Baptiste BRIAUD. All Rights Reserved.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License
##
#parse("common/common.vm")
<?xml version="1.0" encoding="UTF-8"?>
#parse( "common/xml_general_copyright.vm" )

##<project name="${application.getKeyname()}" default="#if(!${compiler.isOnlySQL()})full #else only-sql#end">
<project name="${application.getKeyname()}-database">
    <description>
        Build file generated by Orbiter Engine for the application ${application.getKeyname()} database
    </description>

#if(${application.hasInjectedFiles()})
    <target name="_inject-data">
        <property name="files-dir" value="${targappConfig.getFilesDir()}/${application.getKeyname()}/files"/>
        <mkdir dir="${dollar}{files-dir}"/>
        <copy todir="${dollar}{files-dir}" overwrite="true" includeemptydirs="true">
            <fileset dir="${dollar}{root-dir}/files">
                <include name="**/*"/>
            </fileset>
        </copy>
        <ant antfile="${dollar}{root-dir}/data-injector.xml" target="inject-files" inheritall="true"/>
    </target>
#end

    <target name="database-generate-ddl-file" depends="_init"
            description="Generate the SQL file for the entire schema creation (no migration). Do not connect to the DB, only produce a SQL file.">
        <echo message="((( generating ddl file ..."/>
        <stopwatch name="generate-ddl-file"/>
        <mkdir dir="${dollar}{root-dir}/sql"/>
        <echo message="     generating full ddl file ..."/>
        <generate-full-ddl-file class-dir="${dollar}{bin-dir}"
                                persistence-xml-file="${dollar}{src-dir}/persistence-no-pool.xml"
                                lib-dir="${dollar}{webinf-lib-dir}"
                                sqlFile="${dollar}{root-dir}/sql/${application.getKeyname()}-full.sql"/>
        <echo message="     generating full ddl file. Done."/>
        <stopwatch name="generate-ddl-file" action="total"/>
        <echo message="))) generating ddl file. Done. (Attention ! stopwatch include 2s sleeping for MySQL)"/>
    </target>

#if(!${compiler.isOnlySQL()})
    <target name="_install-schema" depends="_init"
            description="Connect to the DB and sync the schema in order to work with the generated application">
        <echo message="((( Installing database schema for ${application.getKeyname()} ..."/>
        <stopwatch name="install-schema"/>
        <install-schema class-dir="${dollar}{bin-dir}" lib-dir="${dollar}{webinf-lib-dir}"
                        jdbc-lib-dir="${dollar}{webinf-lib-dir}" persistence-unit="openjpa"/>
        <stopwatch name="install-schema" action="total"/>
        <echo message="))) Installing database schema for ${application.getKeyname()}. Done."/>
    </target>

    <target name="_create-instance" depends="_init">
        <echo message="((( Create database instance and user for ${application.getKeyname()} ..."/>
        <stopwatch name="create-instance"/>
        <java failonerror="true" classname="dolab.tools.database.DatabaseTool">
            <jvmarg value="-Dfile.encoding=UTF-8"/>
            #if(${compiler.isMySQL()})
                <arg line="-db ${application.getKeyname()} -ruser root -rpass ${dollar}{db.root.password} -user ${dollar}{db.user.login} -pass ${dollar}{db.user.password} -dburl jdbc:mysql://localhost:${dollar}{db.port} -jdbcdriver com.mysql.jdbc.Driver#if(${compiler.isNewDB()}) -newdb#end"/>
            #elseif(${compiler.isSQLServer()})
                <arg line="-db ${application.getKeyname()} -ruser sa -rpass sa12% -user sa -pass sa12% -dburl jdbc:jtds:sqlserver://localhost:${dollar}{db.port} -jdbcdriver net.sourceforge.jtds.jdbc.Driver#if(${compiler.isNewDB()}) -newdb#end"/>
            #else
                ERROR : unonkwn database architecture : ${compiler.getDbArch()}
            #end
            <classpath>
                <pathelement location="${dollar}{bin-dir}"/>
                <fileset dir="${dollar}{webinf-lib-dir}">
                    <include name="**/*.jar"/>
                </fileset>
                <fileset dir="${dollar}{root-dir}/build-lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </java>
        <stopwatch name="create-instance" action="total"/>
        <echo message="))) Create database instance and user for ${application.getKeyname()}. Done."/>
    </target>
#end## End if !compiler.isOnlySQL
</project>