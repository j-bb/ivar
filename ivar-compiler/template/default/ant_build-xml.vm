##
##   Copyright (c) 2004-2020, Jean-Baptiste BRIAUD. All Rights Reserved.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License
##
#parse("common/common.vm")
<?xml version="1.0" encoding="UTF-8"?>
#parse( "common/xml_general_copyright.vm" )

##<project name="${application.getKeyname()}" default="#if(!${compiler.isOnlySQL()})full #else only-sql#end">
<project name="${application.getKeyname()}" default="help">
    <description>
        Build file generated by Orbiter Engine for the application ${application.getKeyname()}
    </description>

    <import file="build-master.xml"/>
    <import file="${application.getKeyname()}-build-properties.xml"/>
    <import file="${application.getKeyname()}-build-database.xml"/>
    <import file="${application.getKeyname()}-build-package.xml"/>
#if(!${compiler.isOnlySQL()})
    <target name="_prepare-qx" unless="qx-already-there" depends="_init">
        <echo message="((( Preparing qx ${application.getKeyname()} ..."/>
        <mkdir dir="${dollar}{web-dir}"/>

        <echo message="Creating qooxdoo application for ${application.getKeyname()} ..."/>
        <delete dir="${dollar}{web-dir}/${application.getPackageName()}"/>
        <exec executable="python" failonerror="yes">
            <arg line="${dollar}{qxsdk-dir}/tool/bin/create-application.py -n ${application.getKeyname()} -s ${application.getPackageName()} -o ${dollar}{web-dir}"/>
        </exec>
        <delete file="${dollar}{web-dir}/${application.getKeyname()}/source/class/${application.getPackageName()}/Application.js"/>
        <copy todir="${dollar}{web-dir}/${application.getKeyname()}" overwrite="true">
            <fileset file="${dollar}{root-dir}/qx-json/config.json"/>
        </copy>

        <move file="${dollar}{root-dir}/index.html"
              tofile="${dollar}{web-dir}/${application.getKeyname()}/source/index.html"/>

        <echo message="Creating qooxdoo application for ${application.getKeyname()}. Done."/>

        <echo message="))) Preparing qx ${application.getKeyname()}. Done."/>
    </target>
#end

    <target name="_prepare-java" unless="java-already-there" depends="_init">
        <echo message="((( Preparing java ${application.getKeyname()} ..."/>
        <echo message="java-dep-dir = ${dollar}{java-dep-dir}"/>

        <echo message=""/>
        <echo message="              Copying jfwk ..."/>
        <mkdir dir="${dollar}{web-dir}"/>
        <copy todir="${dollar}{src-dir}">
            <fileset dir="${dollar}{java-dep-dir}/jfwk/src">
                <include name="**/*.java"/>
            </fileset>
        </copy>

        <echo message=""/>
        <echo message="              Copying org-json ..."/>
        <copy todir="${dollar}{src-dir}">
            <fileset dir="${dollar}{java-dep-dir}/json/src">
                <include name="**/*.java"/>
            </fileset>
        </copy>

        <echo message=""/>
        <echo message="              Copying java-json serialization ..."/>
        <copy todir="${dollar}{src-dir}">
            <fileset dir="${dollar}{java-dep-dir}/serialization/src">
                <include name="**/*.java"/>
            </fileset>
        </copy>

        <echo message=""/>
        <echo message="              Copying rpc..."/>
        <copy todir="${dollar}{src-dir}">
            <fileset dir="${dollar}{java-dep-dir}/rpc/src">
                <include name="**/*.java"/>
            </fileset>
        </copy>

        <echo message=""/>
        <echo message="Copying libraries for ${application.getKeyname()} from ${dollar}{targapp-lib-dir} to ${dollar}{webinf-lib-dir} ..."/>
        <copy todir="${dollar}{webinf-lib-dir}" flatten="yes">
            <fileset dir="${dollar}{targapp-lib-dir}">
                <include name="**/*.jar"/>
            </fileset>
        </copy>

        <echo message=""/>
        <echo message="Copying libraries for ${application.getKeyname()} from ${dollar}{java-dep-dir}/lib/netbeans-global to ${dollar}{webinf-lib-dir} ..."/>
        <copy todir="${dollar}{webinf-lib-dir}" flatten="yes">
            <fileset dir="${dollar}{java-dep-dir}/lib/netbeans-global">
                <include name="**/*.jar"/>
            </fileset>
        </copy>

        <echo message=""/>
        <echo message="Copying libraries for ${application.getKeyname()} from ${dollar}{java-dep-dir}/lib/jdbc to ${dollar}{webinf-lib-dir} ..."/>
        <copy todir="${dollar}{webinf-lib-dir}" flatten="yes">
            <fileset dir="${dollar}{java-dep-dir}/lib/jdbc">
                <include name="**/*.jar"/>
            </fileset>
        </copy>
        
        <echo message=""/>
        <echo message="Copying libraries for ${application.getKeyname()} from ${dollar}{java-dep-dir}/lib/jaf since java 9 to ${dollar}{webinf-lib-dir} ..."/>
        <copy todir="${dollar}{webinf-lib-dir}" flatten="yes">
            <fileset dir="${dollar}{java-dep-dir}/lib/jaf since java 9">
                <include name="**/*.jar"/>
            </fileset>
        </copy>

        <echo message=""/>
        <echo message="))) Preparing java ${application.getKeyname()}. Done."/>
    </target>

    <target name="_buildEngineTool" depends="_init">
        <echo message="((( Building Orbiter Engine tools  ..."/>
        <stopwatch name="build-enginetools"/>
        <mkdir dir="${dollar}{root-dir}/build-lib/zztmp"/>

        <path id="targapp-tools-compile-classpath">
            <pathelement location="${dollar}{bin-dir}"/>
            <fileset dir="${dollar}{webinf-lib-dir}">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${dollar}{root-dir}/build-lib">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${dollar}{java-dep-dir}/lib/args4j">
                <include name="**/*.jar"/>
            </fileset>
        </path>
        <java-compile src-path="${dollar}{java-dep-dir}/targapp-tools/database/dolab/tools/database"
                      destdir="${dollar}{root-dir}/build-lib/zztmp"
                      compile-classpath="targapp-tools-compile-classpath"/>
        <java-compile src-path="${dollar}{java-dep-dir}/targapp-tools/injector/dolab/tools/injector"
                      destdir="${dollar}{root-dir}/build-lib/zztmp"
                      compile-classpath="targapp-tools-compile-classpath"/>
        <jar destfile="${dollar}{root-dir}/build-lib/targapp-tools.jar" compress="yes" index="yes">
            <fileset dir="${dollar}{root-dir}/build-lib/zztmp">
                <include name="**/*.*"/>
            </fileset>
        </jar>
        <delete dir="${dollar}{root-dir}/build-lib/zztmp"/>
        <stopwatch name="build-enginetools" action="total"/>
        <echo message="))) Building Orbiter Engine tools. Done."/>
    </target>

    <target name="_compile" depends="_init">
        <echo message="((( Compiling ${application.getKeyname()} ..."/>

        <delete dir="${dollar}{bin-dir}"/>
        <mkdir dir="${dollar}{bin-dir}"/>

        <stopwatch name="compile"/>
        <java-compile destdir="${dollar}{bin-dir}" src-path="${dollar}{src-dir}" compile-classpath="compile-classpath"/>
        <mkdir dir="${dollar}{bin-dir}/META-INF"/>
        <copy todir="${dollar}{bin-dir}/META-INF">
            <fileset file="${dollar}{src-dir}/META-INF/persistence.xml"/>
        </copy>
        <stopwatch name="compile" action="total"/>

#if(!${compiler.isOnlySQL()})
        <antcall target="_buildEngineTool"/>
#end

        <echo message="))) Compiling ${application.getKeyname()}. Done."/>
    </target>

    <target name="_enhance" depends="_init">
        <echo message="((( Enhancing ${application.getKeyname()} ..."/>
        <stopwatch name="enhance"/>
        <java classname="org.apache.openjpa.enhance.PCEnhancer" failonerror="true" fork="true">
            <jvmarg value="-Dfile.encoding=UTF-8"/>
            <classpath>
                <fileset dir="${dollar}{webinf-lib-dir}">
                    <include name="*.jar"/>
                </fileset>

                <pathelement location="${dollar}{bin-dir}"/>
                <pathelement path="${dollar}{src-dir}"/>
            </classpath>
            <arg value="-properties"/>
            <arg value="META-INF/persistence.xml#openjpa"/>
        </java>
        <stopwatch name="enhance" action="total"/>
        <echo message="))) Enhancing ${application.getKeyname()}. Done."/>
    </target>

#if(!${compiler.isOnlySQL()})
    <target name="package" depends="_init, _init-build" description="Produce the war file.">
        <echo message="((( Packaging ${application.getKeyname()} ..."/>

        <delete file="${dollar}{root-dir}/${application.getKeyname()}.war"/>
        <war destfile="${dollar}{root-dir}/${application.getKeyname()}.war" webxml="${dollar}{web-dir}/web.xml"
             compress="yes"
             update="no"
             index="yes" comment="${application.getKeyname()} generated by Orbiter Engine">
            #if(${compiler.isProd()})
                <fileset dir="${dollar}{icons-dir}/.." includes="icons,icons/**/*"/>
            #end
            <fileset dir="${dollar}{root-dir}/static-resources"/>
            <fileset dir="${dollar}{web-package-dir}"/>
            <fileset dir="${dollar}{postcompile-web-dir}"/>
            <fileset dir="${dollar}{postcompile-icons-dir}"/>
            <lib dir="${dollar}{root-dir}/webinflib">
                <include name="**/*.jar"/>
            </lib>
            <classes dir="${dollar}{bin-dir}"/>
        </war>
        <echo message="))) Packaging ${application.getKeyname()}. Done."/>
    </target>

    <target name="_package-source" depends="_init"
            description="Like package but without the big source zip and include qooxdoo SDK">
        <echo message="((( Packaging ${application.getKeyname()} ..."/>
        <delete file="${dollar}{root-dir}/${application.getKeyname()}.war"/>
        <war destfile="${dollar}{root-dir}/${application.getKeyname()}.war" webxml="${dollar}{web-dir}/web.xml"
             compress="yes"
             update="no"
             index="yes" comment="${application.getKeyname()} generated by Orbiter Engine">
            #if(${compiler.isProd()})
                <fileset dir="${dollar}{icons-dir}"/>
            #end
            <fileset dir="${dollar}{web-package-dir}"/>
            <fileset dir="${dollar}{postcompile-web-dir}"/>
            <fileset dir="${dollar}{postcompile-icons-dir}"/>
            #if(!${compiler.isProd()})
                <fileset dir="${dollar}{root-dir}/engine-power"/>
            #end
            <lib dir="${dollar}{root-dir}/webinflib">
                <include name="**/*.jar"/>
            </lib>
            <classes dir="${dollar}{bin-dir}"/>
        </war>
        <echo message="))) Packaging ${application.getKeyname()}. Done."/>
    </target>
#end## End if !compiler.isOnlySQL

#if(!${compiler.isOnlySQL()})
    <target name="qx-clean" depends="_init">
        <delete dir="${dollar}{web-dir}/${application.getKeyname()}/build"/>
        <delete dir="${dollar}{web-dir}/${application.getKeyname()}/source/script"/>
        <exec executable="python" failonerror="yes">
            <arg line="${dollar}{web-dir}/${application.getKeyname()}/generate.py clean"/>
        </exec>
        <exec executable="python" failonerror="yes">
            <arg line="${dollar}{web-dir}/${application.getKeyname()}/generate.py distclean"/>
        </exec>
    </target>

    <target name="qx-build" depends="_init">
        <echo message="((( Building UI for ${application.getKeyname()} ..."/>

        <delete dir="${dollar}{web-dir}/${application.getKeyname()}/source/class"/>
        <mkdir dir="${dollar}{web-dir}/${application.getKeyname()}/source/class"/>

        <copy todir="${dollar}{web-dir}/${application.getKeyname()}/source/class">
            <fileset dir="${dollar}{root-dir}/qx-src"/>
        </copy>
        <stopwatch name="qx-build"/>
        <echo message="${dollar}{basedir}/web/${application.getKeyname()}/generate.py --config-verbose --verbose build"/>
        <exec executable="python" failonerror="yes">
            <arg line="${dollar}{basedir}/web/${application.getKeyname()}/generate.py --config-verbose --verbose build"/>
        </exec>
        <stopwatch name="qx-build" action="total"/>
        <echo message="))) Building UI for ${application.getKeyname()}. Done."/>
    </target>

    <target name="qx-lint" depends="_init">
        <echo message="((( qx lint for ${application.getKeyname()} ..."/>
        <stopwatch name="qx-lint"/>
        <exec executable="python" failonerror="yes" dir="${dollar}{web-dir}/${application.getKeyname()}">
            <arg line="generate.py lint"/>
        </exec>
        <stopwatch name="qx-lint" action="total"/>
        <echo message="))) qx lint for ${application.getKeyname()}. Done."/>
    </target>

    <target name="qx-source" depends="_init">
        <echo message="((( Building ** source ** UI for ${application.getKeyname()} ..."/>
        <copy todir="${dollar}{web-dir}/${application.getKeyname()}/source/class">
            <fileset dir="${dollar}{root-dir}/qx-src"/>
        </copy>
        <stopwatch name="qx-source"/>
        <exec executable="python" failonerror="yes" dir="${dollar}{web-dir}/${application.getKeyname()}">
            <arg line="generate.py --config-verbose --verbose source"/>
        </exec>
        <stopwatch name="qx-source" action="total"/>
        <echo message="))) Building ** source ** UI for ${application.getKeyname()}. Done."/>
    </target>

    <target name="_deploy" depends="_init" description="Deploy into Tomcat the compiled application">
        <echo message="((( Deploying ${application.getKeyname()} under webroot for production ..."/>
        <echo message="Undeploying ... (note: if it fails the first time, don't worry, the app doesn't exists the very first time and then, can't be undeployed. The global build will continue."/>
        <echo message="   using url=http://localhost:${dollar}{jeecontainer.port}/manager"/>
        <echo message="   using username=${dollar}{jeecontainer.login}"/>
        <echo message="   using path=/${application.getKeyname()}"/>
        <undeploy url="http://localhost:${dollar}{jeecontainer.port}/manager"
                  username="${dollar}{jeecontainer.login}"
                  password="${dollar}{jeecontainer.password}"
                  path="/${application.getKeyname()}"
                  failonerror="no"/>
        <echo message="Undeploying. Done."/>

        <echo message="Deploying ..."/>
        <echo message="   using url=http://localhost:${dollar}{jeecontainer.port}/manager"/>
        <echo message="   using username=${dollar}{jeecontainer.login}"/>
        <echo message="   using war=file:${dollar}{root-dir}/${application.getKeyname()}.war"/>
        <echo message="   using path=/${application.getKeyname()}"/>
        <deploy url="http://localhost:${dollar}{jeecontainer.port}/manager"
                username="${dollar}{jeecontainer.login}"
                password="${dollar}{jeecontainer.password}"
                path="/${application.getKeyname()}"
                war="file:${dollar}{root-dir}/${application.getKeyname()}.war"
                failonerror="yes"/>
        <echo message="Deploying. Done."/>
        <echo message="))) Deploying ${application.getKeyname()} under webroot for production. Done."/>
    </target>

    <target name="list-app" depends="_init">
        <echo message="Listing applications deployed :"/>
        <echo message="   using url=http://localhost:${dollar}{jeecontainer.port}/manager"/>
        <echo message="   using username=${dollar}{jeecontainer.login}"/>
        <echo message="-------------------------------"/>
        <list url="http://localhost:${dollar}{jeecontainer.port}/manager"
              username="${dollar}{jeecontainer.login}"
              password="${dollar}{jeecontainer.password}"
              failonerror="yes"/>
        <echo message="-------------------------------"/>
    </target>

    <target name="start-app" depends="_init">
        <echo message="Starting ..."/>
        <echo message="   using url=http://localhost:${dollar}{jeecontainer.port}/manager"/>
        <echo message="   using username=${dollar}{jeecontainer.login}"/>
        <echo message="   using path=/${application.getKeyname()}"/>
        <start url="http://localhost:${dollar}{jeecontainer.port}/manager"
               username="${dollar}{jeecontainer.login}"
               password="${dollar}{jeecontainer.password}"
               path="/${application.getKeyname()}"
               failonerror="yes"/>
        <echo message="Starting. Done."/>
    </target>

    <target name="stop-app" depends="_init">
        <echo message="Stoping ..."/>
        <echo message="   using url=http://localhost:${dollar}{jeecontainer.port}/manager"/>
        <echo message="   using username=${dollar}{jeecontainer.login}"/>
        <echo message="   using path=/${application.getKeyname()}"/>
        <stop url="http://localhost:${dollar}{jeecontainer.port}/manager"
              username="${dollar}{jeecontainer.login}"
              password="${dollar}{jeecontainer.password}"
              path="/${application.getKeyname()}"
              failonerror="yes"/>
        <echo message="Stoping. Done."/>
    </target>
#end## End if !compiler.isOnlySQL

    <target name="_copy-targapp-build-lib" unless="build-lib-already-there" description="Copy targapp build lib">
        <mkdir dir="${dollar}{root-dir}/build-lib"/>
        <copy todir="${dollar}{root-dir}/build-lib">
            <fileset dir="${dollar}{targapp-lib-dir}">
                <include name="**/*.jar"/>
            </fileset>
        </copy>
    </target>

    <target name="_boot" depends="debug">
        <available file="${dollar}{root-dir}/build-lib" property="build-lib-already-there"/>
        <available file="${dollar}{web-dir}/${application.getKeyname()}" property="qx-already-there"/>
        <available file="${dollar}{webinf-lib-dir}" property="java-already-there"/>
        <available file="${dollar}{root-dir}/engine-power/zic-generic.wav" property="enginepower-already-there"/>
    </target>

    <target name="_init" depends="_boot, _copy-targapp-build-lib" description="Define all task needed for the build">
        #if(!${compiler.isOnlySQL()})
            <taskdef name="undeploy" classname="org.apache.catalina.ant.UndeployTask">
                <classpath>
                    <fileset dir="${dollar}{root-dir}/build-lib">
                        <include name="**/*.jar"/>
                    </fileset>
                </classpath>
            </taskdef>

            <taskdef name="deploy" classname="org.apache.catalina.ant.DeployTask">
                <classpath>
                    <fileset dir="${dollar}{root-dir}/build-lib">
                        <include name="**/*.jar"/>
                    </fileset>
                </classpath>
            </taskdef>

            <taskdef name="start" classname="org.apache.catalina.ant.StartTask">
                <classpath>
                    <fileset dir="${dollar}{root-dir}/build-lib">
                        <include name="**/*.jar"/>
                    </fileset>
                </classpath>
            </taskdef>

            <taskdef name="stop" classname="org.apache.catalina.ant.StopTask">
                <classpath>
                    <fileset dir="${dollar}{root-dir}/build-lib">
                        <include name="**/*.jar"/>
                    </fileset>
                </classpath>
            </taskdef>

            <taskdef name="list" classname="org.apache.catalina.ant.ListTask">
                <classpath>
                    <fileset dir="${dollar}{root-dir}/build-lib">
                        <include name="**/*.jar"/>
                    </fileset>
                </classpath>
            </taskdef>
        #end

        <taskdef resource="net/sf/antcontrib/antcontrib.properties">
            <classpath>
                <fileset dir="${dollar}{root-dir}/build-lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </taskdef>

        <mkdir dir="${dollar}{postcompile-web-dir}"/>
        <mkdir dir="${dollar}{postcompile-icons-dir}/icons"/>
    </target>

    <!-- TODO 2020: move this to properties.xml and remove the task.-->
    <target name="_init-build">
        <property name="prod" value="yes"/>
        <property name="!prod" value="no"/>
        <property name="qx-source" value="no"/>
        <property name="web-package-dir" value="${dollar}{web-dir}/${application.getKeyname()}/build"/>
        <echo message="Production switch is ${dollar}{prod}, then, debug switch is obviously ${dollar}{!prod}"/>
    </target>

#if(!${compiler.isOnlySQL()})
    <target name="_init-source">
        <property name="prod" value="no"/>
        <property name="!prod" value="yes"/>
        <property name="qx-source" value="yes"/>
    ##        <property name="web-package-dir" value="${dollar}{web-dir}/${application.getKeyname()}/source"/>

        <property name="web-package-dir" value="${dollar}{web-dir}"/>
        <echo message="Production switch is ${dollar}{prod}, then, debug switch is obviously ${dollar}{!prod}"/>
    </target>

    <target name="all-deploy"
            depends="_init, _init-build, _create-instance, _install-schema #if(${application.hasInjectedFiles()}),_inject-data#end, package, _deploy, start-app, list-app"/>

    <target name="all-deploy-source"
            depends="_init, _init-source, _create-instance, _install-schema #if(${application.hasInjectedFiles()}),_inject-data#end, _package-source, _deploy, start-app, list-app"/>

    <target name="all"
            depends="_init, _init-build, #if(${compiler.isProd()})_copy-icons,#end _prepare-qx, _prepare-java, _compile, _enhance, database-generate-ddl-file, qx-build, package"/>

    <target name="all-source"
            depends="_init, _init-source, #if(${compiler.isProd()})_copy-icons,#end _prepare-qx, _prepare-java, _compile, _enhance, database-generate-ddl-file, qx-source"/>

    <target name="database-full" depends="_init, _create-instance, _install-schema"/>

    <target name="database-schema" depends="_init, _install-schema"/>

    <target name="database-instance" depends="_init, _create-instance"/>

    <target name="compile" depends="_init, _init-build, _compile, _enhance, qx-build"/>

    <target name="deploy-app" depends="_init, _init-build, _deploy"/>

    <target name="re" depends="compile,  all-deploy"/>

    <target name="repackage-full" depends="_init, _init-build, _create-instance, _install-schema, all-deploy"/>

    <target name="full" depends="_init, _init-build, _compile, _enhance, qx-build, _create-instance, _install-schema, all-deploy"/>
#else

    <target name="only-sql" depends="_init, _init-build, prepare-java, _compile, _enhance, database-generate-ddl-file"/>
#end

    <import file="build-help.xml"/>
</project>